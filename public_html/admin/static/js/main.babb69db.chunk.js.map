{"version":3,"sources":["context/Layout/LayoutContext.tsx","context/Layout/constants.ts","components/Navbar/Navbar.tsx","context/User/UserContext.tsx","context/User/constants.ts","components/MainDrawer/MainDrawerListItem.tsx","components/MainDrawer/MainDrawer.tsx","components/Layout/Container.tsx","components/Layout/ContainerCentered.tsx","components/Layout/ActionButton.tsx","components/Layout/Page.tsx","components/Layout/ListItemStack.tsx","components/Layout/FilterStack.tsx","components/Layout/SubText.tsx","components/Layout/MoneyText.tsx","components/Layout/ListItemBox.tsx","components/Layout/FilterDropdown.tsx","components/Layout/DynamicDrawerMenu.tsx","components/Layout/ConfirmationMenu.tsx","components/Layout/LoadMoreButton.tsx","pages/Inicio.tsx","services/helpers.ts","services/constants.ts","services/useContactsService.tsx","services/useExpensesService.tsx","services/useProductsService.tsx","services/useOrdersService.tsx","services/useTransactionsService.tsx","services/index.ts","components/Forms/FilterForm.tsx","components/Forms/DrawerForm.tsx","pages/Stock/ProductsFilterForm.tsx","components/ListItems/StockListItem.tsx","components/ListItems/ContactsListItem.tsx","components/ListItems/OrdersListItem.tsx","components/ListItems/TransactionsListItem.tsx","pages/Stock/ProductsList.tsx","pages/Stock/ProductsItemMenu.tsx","pages/Stock/ProductsMainMenu.tsx","pages/Stock/ProductCategoriesDrawerForm.tsx","pages/Stock/ModifyProductCategoriesDrawerForm.tsx","pages/Stock/ProductsDrawerForm.tsx","pages/Stock/Stock.tsx","pages/Pedidos/OrdersFilterForm.tsx","pages/Pedidos/OrdersList.tsx","pages/Pedidos/OrdersItemMenu.tsx","pages/Pedidos/OrdersMainMenu.tsx","pages/Pedidos/OrdersDrawerForm.tsx","pages/Pedidos/DeliveredProductsDrawerForm.tsx","pages/Pedidos/OrderTransactionDrawerForm.tsx","pages/Pedidos/OrderProductsForm.tsx","pages/Pedidos/Pedidos.tsx","pages/Contactos/ContactsFilterForm.tsx","pages/Contactos/ContactsList.tsx","pages/Contactos/ContactsItemMenu.tsx","pages/Contactos/ContactsMainMenu.tsx","pages/Contactos/ContactsDrawerForm.tsx","pages/Contactos/Contactos.tsx","pages/Transacciones/TransactionsFilterForm.tsx","pages/Transacciones/TransactionsList.tsx","pages/Transacciones/TransactionsItemMenu.tsx","pages/Transacciones/TransactionsDrawerForm.tsx","pages/Transacciones/Transacciones.tsx","pages/Gastos/ExpensesFilterForm.tsx","pages/Gastos/ExpensesList.tsx","pages/Gastos/ExpensesItemMenu.tsx","pages/Gastos/ExpensesMainMenu.tsx","pages/Gastos/ExpenseCategoriesDrawerForm.tsx","pages/Gastos/ModifyExpenseCategoriesDrawerForm.tsx","pages/Gastos/ExpensesDrawerForm.tsx","pages/Gastos/Gastos.tsx","pages/Configuracion.tsx","pages/index.js","App.tsx","serviceWorker.js","theme.js","components/Login/LoginForm.tsx","components/Login/LoginWrapper.tsx","index.js"],"names":["LayoutContext","createContext","initialState","header","confirmationMenu","title","subtitle","undefined","action","console","log","reducer","state","type","payload","Error","LayoutContextProvider","children","useReducer","store","dispatch","confirmationDrawerState","useDisclosure","setHeader","useCallback","setConfirmationMenuData","layoutContextValue","useMemo","Provider","value","Navbar","onMenuClick","useContext","Flex","as","align","justify","wrap","bg","color","position","Box","width","textAlign","Text","fontSize","IconButton","isRound","aria-label","icon","FaBars","variantColor","size","onClick","m","UserContext","initialUserState","name","email","id","user","token","isLoading","localStorage","removeItem","UserContextProvider","userContextValue","MainDrawerButton","Button","variant","justifyContent","alignItems","paddingLeft","borderBottom","borderColor","marginRight","fontWeight","MainDrawerListItem","link","MainDrawerButtonWithProps","to","MainDrawer","isOpen","onClose","links","Drawer","placement","overflowY","paddingX","map","index","key","FaDoorOpen","Container","display","ContainerCentered","height","ActionButton","ariaLabel","borderRadius","bottom","right","Page","useEffect","ListItemStack","maxHeight","Stack","spacing","shouldWrapChildren","pt","pb","FilterStack","py","SubText","opacity","MoneyText","ammount","red","ListItemBox","borderWidth","rounded","px","FilterDropdown","menu","onChange","defaultValue","Select","disabled","DynamicDrawerMenu","ConfirmationMenu","LoadMoreButton","Inicio","mt","p","shadow","Heading","Divider","Stat","serverReducerFactory","filters","offset","categories","results","count","status","error","fetchFunctionFactory","dataUri","axios","get","params","headers","Authorization","then","response","data","result","catch","fetchCategoryFunctionFactory","postFunctionFactory","update","identifier","method","request","url","finally","deleteByIdFunctionFactory","idField","delete","pageControlsFactory","updateFilters","loadMoreData","contactsDataUri","localapi","InitialState","search","role","order","useContactsService","fetchContacts","useState","contactsMenu","setContactsMenu","fetchContactsMinified","setter","fetchMenuOptionFunctionFactory","postOrUpdateContact","contact_id","deleteContactById","expensesDataUri","expenseCategoriesDataUri","category_id","useExpensesService","fetchExpenseCategories","fetchExpenses","postOrUpdateExpense","expense_id","postOrUpdateExpenseCategory","deleteExpenseCategoryById","deleteExpenseById","productsDataUri","productCategoriesDataUri","useProductsService","fetchProductCategories","fetchProducts","minifiedProductsList","setMinifiedProductsList","fetchMinifiedProductsList","Axios","postOrUpdateProduct","product_id","postOrUpdateProductCategory","deleteProductCategoryById","deleteProductById","ordersDataUri","completed","delivered","useOrdersService","orderProducts","setOrderProducts","fetchOrders","fetchOrderProductsByOrderId","order_id","callback","err","postOrderProduct","deleteOrderProduct","markDelivered","postTransaction","markCompleted","postOrUpdateOrder","deleteOrderById","useTransactionsService","fetchTransactions","UpdateTransactionByID","transaction_id","dateHelper","date","getDay","getMonth","getFullYear","getHours","getMinutes","FilterForm","filtersData","useForm","register","handleSubmit","control","onSubmit","FormControl","searchBar","Input","placeholder","ref","dropdowns","e","target","DrawerForm","subsubtitle","inputs","onFormSubmit","deleteFunction","deleteFieldName","formState","errors","getValues","values","isInvalid","Object","find","validationRules","options","formHelperText","maxW","message","FormErrorMessage","InputGroup","flexGrow","rules","FormHelperText","mb","isSubmitting","onDelete","float","ml","ProductsFilterForm","StockListItem","buyPrice","sellPrice","updatedAt","updatedAtDate","Date","formattedUpdatedAtDate","direction","flexDirection","maxWidth","flexWrap","mr","FaCartArrowDown","FaCoins","ContactsListItem","address","phone","money","FaMapMarkedAlt","FaPhoneAlt","OrdersListItem","itemAmmount","sum","debt","Checkbox","isChecked","TransactionsListItem","createdAt","createdAtDate","formattedCreatedAtDate","ProductsList","onItemClick","buy_price","sell_price","created_at","product_history_id","updated_at","stock","length","ProductsItemMenu","listItemDrawerState","productDrawerState","productData","onOpen","ProductsMainMenu","actionButtonDrawerState","onAddProductClick","onAddProductCategoryClick","onModifyProductCategoryClick","ExpensesDrawerForm","productCategoryDrawerState","submitFunction","required","minLength","maxLength","ModifyProductsDrawerForm","modifyProductCategoryDrawerState","selectedCategory","pattern","ProductsDrawerForm","productDrawerFormState","ClickedItemInitialState","Stock","clickedItem","setClickedItem","mode","setProductMenuFormState","categoryDropdown","setCategoryDropdown","FaBookOpen","ProductCategoriesDrawerForm","ModifyProductCategoriesDrawerForm","OrdersFilterForm","OrdersList","contact","products_count","paid","OrdersItemMenu","orderProductsDrawerState","deliveredProductsDrawerState","orderData","orderTransactionDrawerState","OrdersMainMenu","onAddOrderClick","OrdersDrawerForm","orderDrawerState","orderDrawerFormState","contacts","DeliveredProductsDrawerForm","productsForm","products","entries","entry","parseInt","product","product_version","validate","max","OrderProductsForm","watch","setValue","filteredMinifiedProductsList","setFilteredMinifiedProductsList","filteredMenu","setFilteredMenu","maxProducts","setMaxProducts","selectedProduct","filter","orderProduct","findAndSetMax","selectedProductInArray","onChangeCategory","category","newMenu","newDefaultProduct","Accordion","allowToggle","allowMultiple","flex","List","FaTrashAlt","FormLabel","htmlFor","NumberInput","n","Slider","min","reduce","acc","Pedidos","setOrderMenuFormState","FaListUl","OrderTransactionDrawerForm","ContactsFilterForm","ContactsList","ContactsItemMenu","listItemMenu","contactMenu","contactData","window","open","alert","ContactsMainMenu","actionButtonMenu","onAddContactClick","ContactsDrawerForm","contactMenuFormState","Contactos","setContactMenuFormState","FaUsers","TransactionsFilterForm","TransactionsList","TransactionsItemMenu","transactionMenu","transactionData","TransactionsDrawerForm","Transactionos","ExpensesFilterForm","ExpensesList","description","ExpensesItemMenu","expenseDrawerState","expenseData","ExpensesMainMenu","onAddExpenseClick","onAddExpenseCategoryClick","onModifyExpenseCategoryClick","expenseCategoryDrawerState","ModifyExpensesDrawerForm","modifyExpenseCategoryDrawerState","expenseDrawerFormState","Gastos","setExpenseMenuFormState","ExpenseCategoriesDrawerForm","ModifyExpenseCategoriesDrawerForm","Configuracion","App","FaHome","FaDropbox","FaDonate","path","component","Transacciones","Boolean","location","hostname","match","theme","colors","brand","900","800","700","breakpoints","fonts","heading","body","mono","fontSizes","xs","sm","md","lg","xl","loginUri","LoginForm","password","post","res","LoginWrapper","localToken","getItem","decodedIdentity","jwt","decode","setItem","userDataUri","sub","Spinner","ReactDOM","render","ThemeProvider","customTheme","CSSReset","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.babb69db.chunk.js","sourcesContent":["import React, { createContext, useReducer, useMemo, useCallback } from \"react\";\r\nimport { useDisclosure } from \"@chakra-ui/core\";\r\nimport { SET_HEADER, SET_CONFIRMATION_MENU } from \"./\";\r\n\r\n/*contexto de layout, los contextos son una forma localizada de manejar el estado,\r\nse pueden extraer el dispatch (funcion para cambiar los valores del estado)\r\ny la store (donde estan los valores del estado) usando el hook \"useContext\" con el contexto creado usando \"createContext\"\r\nsiempre y cuando sea invocado en un componente que esté wrappeado por el provider que createContext te da*/\r\nexport const LayoutContext: any = createContext({});\r\n\r\n//interfaces para tipear el estado de la store\r\nexport interface IConfirmationMenu {\r\n  title: string;\r\n  subtitle?: string;\r\n  action: () => void;\r\n}\r\n\r\ninterface ILayoutState {\r\n  header: string;\r\n  confirmationMenu: IConfirmationMenu;\r\n}\r\n\r\n//el estado inicial de la store\r\nconst initialState: ILayoutState = {\r\n  header: \"Error\",\r\n  confirmationMenu: {\r\n    title: \"Error\",\r\n    subtitle: undefined,\r\n    action: () => console.log(\"Confirmation menu action error\"),\r\n  },\r\n};\r\n\r\n/*el reducer, se encarga de recibir un string para determinar que accion realizar con el estado y el payload (carga de datos opcional),\r\nlo que retorna sería el nuevo estado de la store completa, por eso se destructura state de esa forma*/\r\n/*EL STRING QUE RECIBE SIEMPRE LO TENGO ESCRITO DE FORMA PREVIA EN UN ARCHIVO LOCAL LLAMADO \"constants.ts\"\r\nPARA ASEGURARME DE NO TENER CONFLICTOS CON TYPOS O CAMBIOS DE NOMBRE A MITAD DE DESARROLLO*/\r\nconst reducer = (\r\n  state: ILayoutState,\r\n  action: { type: string; payload: any }\r\n) => {\r\n  switch (action.type) {\r\n    case SET_HEADER:\r\n      return { ...state, header: action.payload };\r\n    case SET_CONFIRMATION_MENU:\r\n      console.log(action.payload);\r\n      return { ...state, confirmationMenu: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\n//el provider del context del layout, asegurate de wrappear todos los componentes con los que quieras acceder al estado y al dispatch del layout en este componente\r\nexport const LayoutContextProvider: React.FC = ({ children }) => {\r\n  const [store, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const confirmationDrawerState = useDisclosure();\r\n\r\n  const setHeader = useCallback(\r\n    (header: string) => dispatch({ type: SET_HEADER, payload: header }),\r\n    []\r\n  );\r\n\r\n  const setConfirmationMenuData = useCallback(\r\n    (confirmationMenu: IConfirmationMenu) =>\r\n      dispatch({ type: SET_CONFIRMATION_MENU, payload: confirmationMenu }),\r\n    []\r\n  );\r\n\r\n  const layoutContextValue = useMemo(() => {\r\n    return { store, dispatch, confirmationDrawerState, setHeader, setConfirmationMenuData };\r\n  }, [store, dispatch, confirmationDrawerState, setHeader, setConfirmationMenuData]);\r\n\r\n  return (\r\n    <LayoutContext.Provider value={layoutContextValue}>\r\n      {children}\r\n    </LayoutContext.Provider>\r\n  );\r\n};\r\n","export const SET_HEADER = \"SET_HEADER\";\r\nexport const SET_CONFIRMATION_MENU = \"SET_CONFIRMATION_MENU\";","import React, { useContext } from \"react\";\r\nimport { Flex } from \"@chakra-ui/core\";\r\nimport { IconButton, Text, Box } from \"@chakra-ui/core\";\r\nimport { FaBars } from \"react-icons/fa\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\n\r\ninterface INavbarProps {\r\n  onMenuClick: () => void;\r\n}\r\n\r\n//Barra de navegacion que tiene un boton que activa el MainDrawer\r\n//El header usa un context para obtener el titulo desde los botones del drawer (en realidad es un useEffect en las paginas, que se activa al renderizarlas)\r\nconst Navbar: React.FC<INavbarProps> = ({ onMenuClick }) => {\r\n  const {\r\n    store: { header },\r\n  } = useContext(LayoutContext);\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      align=\"center\"\r\n      justify=\"space-between\"\r\n      wrap=\"wrap\"\r\n      bg=\"teal.500\"\r\n      color=\"white\"\r\n      position=\"relative\"\r\n    >\r\n      {/* ESTE HEADER TOMA EL ESTADO DE UN CONTEXT, QUE CAMBIA CON LOS BOTONES DEL MAINDRAWER */}\r\n      <Box position=\"absolute\" width=\"100%\" textAlign=\"center\">\r\n        <Text fontSize=\"lg\">{header}</Text>\r\n      </Box>\r\n\r\n      <IconButton\r\n        isRound={true}\r\n        aria-label=\"menu\"\r\n        icon={FaBars}\r\n        variantColor=\"teal\"\r\n        size=\"lg\"\r\n        onClick={onMenuClick}\r\n        m=\"0.5rem\"\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { createContext, useReducer, useMemo } from \"react\";\r\nimport { SAVE_TOKEN, SAVE_USER, LOG_OUT, LOADING } from \"./constants\";\r\n\r\n//PARA MAS INFO SOBRE COMO USO LOS CONTEXTS ENTRA A \"LayoutContext.tsx\"\r\n\r\nexport const UserContext: any = createContext({});\r\n\r\nexport type UserData = {\r\n  name: string;\r\n  email: string;\r\n  id: number;\r\n};\r\n\r\nexport interface IUserState {\r\n  user: UserData;\r\n  token: string;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst initialUserState: UserData = {\r\n  name: \"\",\r\n  email: \"\",\r\n  id: 0,\r\n};\r\n\r\nconst initialState: IUserState = {\r\n  user: initialUserState,\r\n  token: \"\",\r\n  isLoading: true,\r\n};\r\n\r\nconst reducer = (state: IUserState, action: { type: string; payload: any }) => {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return { ...state, isLoading: action.payload };\r\n    //SAVE_TOKEN y SAVE_USER se encargan de guardar el token y los datos de usuario en el estado del contexto, respectivamente\r\n    case SAVE_TOKEN:\r\n      return { ...state, token: action.payload };\r\n    case SAVE_USER:\r\n      return { ...state, user: action.payload };\r\n    case LOG_OUT:\r\n      //borra el token del almacenamiento y retorna a defaults el estado del usuario en la app\r\n      localStorage.removeItem(\"token\");\r\n      return { user: initialUserState, token: \"\", isLoading: false };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport const UserContextProvider: React.FC = ({ children }) => {\r\n  const [store, dispatch] = useReducer(reducer, initialState);\r\n  const userContextValue = useMemo(() => {\r\n    return { store, dispatch };\r\n  }, [store, dispatch]);\r\n  return (\r\n    <UserContext.Provider value={userContextValue}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n","export const SAVE_TOKEN = \"SAVE_TOKEN\";\r\nexport const SAVE_USER = \"SAVE_USER\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const LOADING = \"LOADING\";","import React from \"react\";\r\nimport { IconType } from \"react-icons/lib/cjs\";\r\nimport { Box, Button, Text } from \"@chakra-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Boton de drawer, si tiene link en props wrappea el componente en un Link de react-router\r\n//Se puede pasar funcion onClick (yo lo uso para hacer dispatch de cerrar sesion)\r\n//El onclick va a hacer dispatch para el nombre en el header\r\n\r\ninterface IMainDrawerButtonProps {\r\n  name: string;\r\n  icon: IconType;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport interface IMainDrawerListItemProps extends IMainDrawerButtonProps {\r\n  link?: string;\r\n}\r\n\r\nconst MainDrawerButton: React.FC<IMainDrawerButtonProps> = ({ name, icon, onClick }) => {\r\n  return (\r\n    <Button\r\n      variant=\"ghost\"\r\n      size=\"lg\"\r\n      width=\"100%\"\r\n      justifyContent=\"left\"\r\n      alignItems=\"center\"\r\n      paddingLeft=\"25px\"\r\n      borderBottom=\"1px\"\r\n      borderColor=\"rgba(0,0,0,0.1);\"\r\n      onClick={onClick}\r\n    >\r\n      <Box as={icon} marginRight=\"25px\" />\r\n      <Text fontWeight=\"lighter\" fontSize=\"smaller\">\r\n        {name}\r\n      </Text>\r\n    </Button>\r\n  );\r\n};\r\n\r\n//Componente que agrega de forma condicional wrapper Link\r\nconst MainDrawerListItem: React.FC<IMainDrawerListItemProps> = ({\r\n  link,\r\n  name,\r\n  icon,\r\n  onClick,\r\n}) => {\r\n  const MainDrawerButtonWithProps = () => (\r\n    <MainDrawerButton name={name} icon={icon} onClick={onClick} />\r\n  );\r\n  return link ? (\r\n    <Link to={link}>\r\n      <MainDrawerButtonWithProps />\r\n    </Link>\r\n  ) : (\r\n    <MainDrawerButtonWithProps />\r\n  );\r\n};\r\n\r\nexport default MainDrawerListItem;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton\r\n} from \"@chakra-ui/core\";\r\nimport { UserContext, LOG_OUT } from \"../../context/User\";\r\nimport { IMainDrawerListItemProps, default as MainDrawerListItem} from \"./MainDrawerListItem\";\r\nimport { FaDoorOpen } from \"react-icons/fa\";\r\n\r\ninterface IMainDrawerProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  links: IMainDrawerListItemProps[];\r\n}\r\n\r\n//Drawer que muestra todas las rutas de la app con un icono, un boton de logout, y un header con tu username\r\nconst MainDrawer: React.FC<IMainDrawerProps> = ({ isOpen, onClose, links }) => {\r\n  const {\r\n    store: {\r\n      user: { name }\r\n    },\r\n    dispatch\r\n  } = useContext(UserContext);\r\n  return (\r\n    <Drawer isOpen={isOpen} placement=\"left\" onClose={onClose}>\r\n      <DrawerOverlay />\r\n      <DrawerContent>\r\n        <DrawerCloseButton/>\r\n        <DrawerHeader>{name}</DrawerHeader>\r\n       \r\n        <DrawerBody overflowY=\"scroll\" paddingX=\"0\">\r\n        {isOpen && links.map(({name,link,icon},index)=><MainDrawerListItem name={name} link={link} icon={icon} key={index}/>)}\r\n        <MainDrawerListItem name=\"Salir\" icon={FaDoorOpen} onClick={()=>dispatch({type:LOG_OUT})}/>\r\n        </DrawerBody>\r\n\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default MainDrawer;\r\n","import React from \"react\";\r\nimport { Box } from \"@chakra-ui/core\";\r\n\r\n\r\n//se encarga de agregar margenes a los costados de la pagina, de forma responsiva\r\nconst Container: React.FC = ({ children }) => {\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box\r\n        width={[\r\n          \"95%\", // base\r\n          \"90%\", // 480px upwards\r\n          \"80%\", // 768px upwards\r\n          \"80%\", // 992px upwards\r\n        ]}\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport { Box } from \"@chakra-ui/core\";\r\n\r\n//se encarga de centrar en la pantalla todos los componentes wrappeados\r\nconst ContainerCentered: React.FC = ({ children }) => {\r\n  return (\r\n    <Box\r\n      width=\"100vw\"\r\n      height=\"90vh\"\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Box>{children}</Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContainerCentered;\r\n","import React from \"react\";\r\nimport { IconType } from \"react-icons/lib\";\r\nimport { IconButton } from \"@chakra-ui/core\";\r\n\r\ninterface IActionButtonProps {\r\n  icon: IconType;\r\n  action: () => void;\r\n  ariaLabel: string;\r\n}\r\n\r\n//Boton circular en la esquina inferior derecha de la pantalla\r\n//recibe un icono, una accion y un arialabel (titulo para lectores de pantalla)\r\nconst ActionButton: React.FC<IActionButtonProps> = ({\r\n  icon,\r\n  action,\r\n  ariaLabel,\r\n}) => {\r\n  return (\r\n    <IconButton\r\n      width=\"65px\"\r\n      height=\"65px\"\r\n      fontSize=\"25px\"\r\n      borderRadius=\"50%\"\r\n      aria-label={ariaLabel}\r\n      icon={icon}\r\n      onClick={action}\r\n      position=\"fixed\"\r\n      bottom=\"15px\"\r\n      right=\"15px\"\r\n      isRound\r\n      size=\"lg\"\r\n      variantColor=\"blue\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ActionButton;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\nimport { Container } from \"./\";\r\n\r\ninterface IPagePropsInterface {\r\n  title: string;\r\n}\r\n\r\n//Layout de pagina, hace despacho de titulo al contexto del header cuando se renderiza\r\nconst Page: React.FC<IPagePropsInterface> = ({ title, children }) => {\r\n  const { setHeader } = useContext(LayoutContext);\r\n  \r\n  useEffect(() => {\r\n    setHeader(title);\r\n  }, [title, setHeader]);\r\n  \r\n  return <Container>{children}</Container>;\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport { Stack } from \"@chakra-ui/core\";\r\n\r\ninterface IListItemStackProps {\r\n  maxHeight: string;\r\n}\r\n\r\n//abstraccion de contenedor de listas, tiene un tamaño maximo para hacer scroll en overflow\r\n//el padding bottom es para que los action button no tapen detalles importantes\r\nconst ListItemStack: React.FC<IListItemStackProps> = ({ maxHeight, children }) => {\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      shouldWrapChildren={true}\r\n      maxHeight={maxHeight}\r\n      overflowY=\"scroll\"\r\n      pt=\"2\"\r\n      pb=\"85px\"\r\n    >\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ListItemStack;\r\n","import React from \"react\";\r\nimport { Stack } from \"@chakra-ui/core\";\r\n\r\n\r\n//abstraccion de contenedor de filtros, agrega paddings y margenes estilizados a los dropdowns y barras de busqueda\r\nconst FilterStack: React.FC = ({ children }) => {\r\n  return (\r\n    <Stack\r\n      spacing={1}\r\n      shouldWrapChildren={true}\r\n      py=\"10px\"\r\n    >\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default FilterStack;\r\n","import React from \"react\";\r\nimport { Text } from \"@chakra-ui/core\";\r\n\r\n//texto pequeño y gris\r\nconst SubText: React.FC = ({ children }) => {\r\n  return (\r\n    <Text opacity={0.7} fontSize=\"sm\">\r\n      {children}\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport default SubText;\r\n","import React from \"react\";\r\nimport { Text } from \"@chakra-ui/core\";\r\n\r\ninterface IMoneyTextProps {\r\n  ammount: number;\r\n  red?: boolean;\r\n}\r\n\r\n//texto verde y bold, si red es true pasa a ser rojo\r\nconst MoneyText: React.FC<IMoneyTextProps> = ({ ammount, red }) => {\r\n  //si es positivo, el numero es verde, si es negativo es rojo\r\n  //pero si el booleano \"red\" es true, el numero va a ser rojo igual\r\n  const color = ammount<0 ? \"darkred\" : red ? \"darkred\" : \"darkgreen\";\r\n  return (\r\n    <Text color={color} fontWeight=\"600\" display=\"inline\">\r\n      {/* RE-ACOMODA EL SIGNO MENOS EN LA SINTAXIS */}\r\n      {ammount<0 ? `$${-ammount}` : `$${ammount}`}\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport default MoneyText;\r\n","import React from \"react\";\r\nimport { Box } from \"@chakra-ui/core\";\r\n\r\n\r\n//caja para los contenidos de los listitems, da el borde, el relleno y el flex\r\n\r\nconst ListItemBox: React.FC = ({ children }) => {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      justifyContent=\"space-between\"\r\n      borderWidth=\"1px\"\r\n      rounded=\"md\"\r\n      px=\"5\"\r\n      py=\"2\"\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ListItemBox;\r\n","import React from \"react\";\r\nimport { Select } from \"@chakra-ui/core\";\r\n\r\nexport type MenuOption = {\r\n  name: string;\r\n  value: any;\r\n  disabled?: boolean;\r\n};\r\n\r\ninterface IFilterDropdownProps {\r\n  menu: MenuOption[];\r\n  onChange: (e: any | null) => void | any;\r\n  defaultValue: any;\r\n  name: string;\r\n}\r\n\r\n//mapea un array de nombres con valores, va a ser usado para hacer requests al servidor filtrando datos\r\n//por ahi utilizo un wrapper para manejar el estado\r\nconst FilterDropdown: React.FC<IFilterDropdownProps> = ({\r\n  menu,\r\n  onChange,\r\n  defaultValue,\r\n  name,\r\n}) => {\r\n  return (\r\n    <Select onChange={onChange} defaultValue={defaultValue} name={name}>\r\n      {menu.map(({ name, value, disabled }) => (\r\n        <option disabled={disabled} key={value} value={value}>\r\n          {name}\r\n        </option>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nexport default FilterDropdown;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  Button,\r\n  Text,\r\n} from \"@chakra-ui/core\";\r\nimport SubText from \"./SubText\";\r\n\r\ntype MenuOption = {\r\n  name: string;\r\n  action: () => void;\r\n};\r\n\r\ninterface IDynamicDrawerMenuProps {\r\n  title: string;\r\n  subtitle?: string;\r\n  menu: MenuOption[];\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\n/*drawer que recibe un arreglo llamado \"menu\", que vendrian a ser todas las opciones disponibles,\r\ncada una tiene un nombre (que va en el boton) y una accion (que es la funcion que ejecutan)*/\r\n//al tocar un boton cierra el drawer con onClose y ejecuta la funcion asignada en el arreglo \"menu\"\r\nconst DynamicDrawerMenu: React.FC<IDynamicDrawerMenuProps> = ({\r\n  title,\r\n  subtitle,\r\n  menu,\r\n  isOpen,\r\n  onClose,\r\n}) => {\r\n  useEffect(() => {\r\n    console.log(subtitle);\r\n  }, [subtitle]);\r\n  return (\r\n    <Drawer isOpen={isOpen} onClose={onClose} placement=\"bottom\">\r\n      <DrawerOverlay />\r\n      <DrawerContent>\r\n        <DrawerCloseButton />\r\n        <DrawerHeader>\r\n          {title} \r\n          <Text></Text>\r\n          {subtitle && <SubText>{subtitle}</SubText>}\r\n        </DrawerHeader>\r\n        <DrawerBody>\r\n          {isOpen &&\r\n            menu.map(({ name, action }) => (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"lg\"\r\n                width=\"100%\"\r\n                justifyContent=\"left\"\r\n                alignItems=\"center\"\r\n                paddingLeft=\"25px\"\r\n                borderBottom=\"1px\"\r\n                borderColor=\"rgba(0,0,0,0.1);\"\r\n                onClick={() => {\r\n                  onClose();\r\n                  action();\r\n                }}\r\n              >\r\n                <Text fontWeight=\"lighter\" fontSize=\"smaller\">\r\n                  {name}\r\n                </Text>\r\n              </Button>\r\n            ))}\r\n        </DrawerBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default DynamicDrawerMenu;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"./\";\r\n\r\ninterface IConfirmationMenuProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title: string;\r\n  subtitle?: string;\r\n  action: () => void;\r\n}\r\n\r\n//menu drawer de confirmacion de accion, se usa para acciones irreversibles, que necesitan mas atencion de parte del usuario\r\n//EJ: ¿Seguro desea eliminar x?\r\nconst ConfirmationMenu: React.FC<IConfirmationMenuProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  subtitle,\r\n  action,\r\n}) => {\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title={`¿Seguro que desea ${title}?`}\r\n      subtitle={subtitle}\r\n      menu={[\r\n        { name: \"Confirmar\", action },\r\n        { name: \"Cancelar\", action: onClose },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ConfirmationMenu;\r\n","import React from \"react\";\r\nimport { Button } from \"@chakra-ui/core\";\r\n\r\ninterface ILoadMoreButtonProps {\r\n  action: () => void;\r\n}\r\n\r\nconst LoadMoreButton: React.FC<ILoadMoreButtonProps> = ({action}) => {\r\n  return (\r\n    <Button variantColor=\"teal\" variant=\"ghost\" width=\"100%\" onClick={action}>\r\n      Cargar más resultados...\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default LoadMoreButton;\r\n","import React, { useContext } from \"react\";\r\nimport { Page } from \"../components/Layout\";\r\nimport {\r\n  Stat,\r\n  StatLabel,\r\n  StatNumber,\r\n  StatHelpText,\r\n  StatArrow,\r\n  StatGroup,\r\n  Box,\r\n  Stack,\r\n  Divider,\r\n  Heading,\r\n} from \"@chakra-ui/core\";\r\nimport { UserContext } from \"../context/User\";\r\n\r\nexport default function Inicio() {\r\n  const {\r\n    store: {\r\n      user: { name },\r\n    },\r\n  } = useContext(UserContext);\r\n  return (\r\n    <Page title=\"Inicio\">\r\n      <Stack spacing={5} mt=\"5px\">\r\n        <Box p=\"10px\" shadow=\"md\">\r\n          <Heading size=\"sm\">\r\n            Bienvenido/a {name}! Actualmente tenés 0 pedidos pendientes.\r\n          </Heading>\r\n        </Box>\r\n        <Divider/>\r\n        <Box p=\"10px\" shadow=\"md\">\r\n          <StatGroup>\r\n            <Stat>\r\n              <StatLabel>Gasto mensual</StatLabel>\r\n              <StatNumber>£0.00</StatNumber>\r\n              <StatHelpText>Feb 1 - Feb 28</StatHelpText>\r\n            </Stat>\r\n            <Stat>\r\n              <StatLabel>Ganancia mensual bruta</StatLabel>\r\n              <StatNumber>£0.00</StatNumber>\r\n              <StatHelpText>Feb 1 - Feb 28</StatHelpText>\r\n            </Stat>\r\n            <Stat>\r\n              <StatLabel>Ganancia total</StatLabel>\r\n              <StatNumber>£0.00</StatNumber>\r\n              <StatHelpText>Feb 1 - Feb 28</StatHelpText>\r\n            </Stat>\r\n          </StatGroup>\r\n        </Box>\r\n        <Divider />\r\n        <Box p=\"10px\" shadow=\"md\">\r\n          <StatGroup>\r\n            <Stat>\r\n              <StatLabel>Deuda propia</StatLabel>\r\n              <StatNumber>£0.00</StatNumber>\r\n              <StatHelpText>Feb 12 - Feb 28</StatHelpText>\r\n            </Stat>\r\n            <Stat>\r\n              <StatLabel>Deuda de clientes</StatLabel>\r\n              <StatNumber>£0.00</StatNumber>\r\n              <StatHelpText>Feb 12 - Feb 28</StatHelpText>\r\n            </Stat>\r\n          </StatGroup>\r\n        </Box>\r\n      </Stack>\r\n    </Page>\r\n  );\r\n}\r\n","import {\r\n  SET_FILTERS,\r\n  SET_OFFSET,\r\n  SET_RESULTS,\r\n  PUSH_RESULTS,\r\n  SET_CATEGORIES,\r\n} from \"./constants\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport {\r\n  IServiceState,\r\n  IServiceResponse,\r\n  IServiceRequestParamsWithPagination,\r\n  Categories,\r\n} from \"./interfaces\";\r\nimport { MenuOption } from \"../components/Layout/FilterDropdown\";\r\n\r\nexport function serverReducerFactory<Entity, Filters>() {\r\n  return (\r\n    state: IServiceState<Entity, Filters>,\r\n    action: { type: string; payload?: any }\r\n  ) => {\r\n    switch (action.type) {\r\n      case SET_FILTERS:\r\n        return { ...state, filters: action.payload, offset: 0 }; //search, role, order, offset: 0 };\r\n      case SET_OFFSET:\r\n        return { ...state, offset: action.payload };\r\n      case SET_CATEGORIES:\r\n      return { ...state, categories: action.payload };\r\n      case SET_RESULTS:\r\n        console.log(SET_RESULTS);\r\n        return {\r\n          ...state,\r\n          results: action.payload.results,\r\n          count: action.payload.count,\r\n          offset: 0,\r\n        };\r\n      case PUSH_RESULTS:\r\n        console.log(PUSH_RESULTS);\r\n        return {\r\n          ...state,\r\n          count: action.payload.count,\r\n          results: {\r\n            status: action.payload.results.status,\r\n            error: action.payload.results.error,\r\n            payload: [\r\n              ...state.results.payload,\r\n              ...action.payload.results.payload,\r\n            ],\r\n          },\r\n        };\r\n      default:\r\n        throw new Error();\r\n    }\r\n  };\r\n}\r\n\r\ntype axiosRequest<Filters> = (\r\n  params: IServiceRequestParamsWithPagination,\r\n  filters: Filters\r\n) => void;\r\n\r\nexport function fetchFunctionFactory<Entity, Filters>(\r\n  dataUri: string,\r\n  dispatch: any\r\n): axiosRequest<Filters> {\r\n  return ({ offset, token }, filters) => {\r\n    axios\r\n      .get(dataUri, {\r\n        params: { offset, ...filters },\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response: AxiosResponse<IServiceResponse<Entity>>) =>\r\n        dispatch({\r\n          type: offset ? PUSH_RESULTS : SET_RESULTS,\r\n          payload: {\r\n            results: {\r\n              status: \"loaded\",\r\n              payload: response.data.result,\r\n              error: null,\r\n            },\r\n            count: response.data.count,\r\n          },\r\n        })\r\n      )\r\n      .catch((error) =>\r\n        dispatch({\r\n          type: SET_RESULTS,\r\n          payload: { status: \"error\", error, payload: null },\r\n        })\r\n      );\r\n  };\r\n}\r\n\r\nexport function fetchCategoryFunctionFactory(\r\n  dataUri: string,\r\n  token: string,\r\n  dispatch: any\r\n) {\r\n  return () => {\r\n    axios\r\n      .get(dataUri, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response: AxiosResponse<Categories>) =>{\r\n        dispatch({\r\n          type: SET_CATEGORIES,\r\n          payload: response.data.result,\r\n        })}\r\n      )\r\n      .catch((error) => {\r\n        throw new Error(\"no se han podido obtener datos del server\");\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchMenuOptionFunctionFactory(\r\n  dataUri: string,\r\n  token: string,\r\n  setter: (data:MenuOption[])=>void\r\n) {\r\n  return () => {\r\n    axios\r\n      .get(dataUri, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response: AxiosResponse<{result:MenuOption[]}>) =>{\r\n        setter(response.data.result)}\r\n      )\r\n      .catch((error) => {\r\n        throw new Error(\"no se han podido obtener datos del server\");\r\n      });\r\n  };\r\n}\r\n\r\nexport function postFunctionFactory<Entity>(\r\n  dataUri: string,\r\n  token: string,\r\n  update: () => void\r\n) {\r\n  return (data: Entity, identifier: number) => {\r\n    //el id es un discernible, la unica forma de que sea 0 es si estoy creando un contacto nuevo\r\n    const method = identifier === 0 || identifier === undefined || identifier === null ? \"POST\" : \"PUT\";\r\n    axios\r\n      .request({\r\n        url: dataUri,\r\n        method,\r\n        data,\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => console.log(response.status))\r\n      .catch((error) => console.log(error))\r\n      .finally(() => update());\r\n  };\r\n}\r\n\r\nexport function deleteByIdFunctionFactory(\r\n  dataUri: string,\r\n  idField: string,\r\n  token: string,\r\n  update: () => void\r\n) {\r\n  return (id: number) =>\r\n    axios\r\n      .delete(dataUri, {\r\n        params: { [idField]: id },\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => console.log(response.status))\r\n      .catch((error) => console.log(error))\r\n      .finally(() => update());\r\n}\r\n\r\nexport function pageControlsFactory<Filters>(dispatch:any,offset:number){\r\n  const updateFilters = (filters:Filters) => {\r\n    dispatch({ type: SET_FILTERS, payload: filters });\r\n  };\r\n\r\n  //al sumar al offset, se va a triggerear fetch y va a pushear al arreglo ya existente\r\n  const loadMoreData = () => {\r\n    dispatch({ type: SET_OFFSET, payload: offset + 10 });\r\n  };\r\n\r\n  return {updateFilters,loadMoreData};\r\n}","export const SET_FILTERS = \"SET_FILTERS\";\r\nexport const SET_CATEGORIES = \"SET_CATEGORIES\";\r\nexport const SET_OFFSET = \"SET_OFFSET\";\r\nexport const SET_RESULTS = \"SET_RESULTS\";\r\nexport const PUSH_RESULTS = \"PUSH_RESULTS\";\r\nexport const CLEAN = \"CLEAN\";","import {\r\n  useEffect,\r\n  useContext,\r\n  useReducer,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  Contact,\r\n  IServiceState,\r\n  Contacts,\r\n  IContactFilters,\r\n  ServerContact,\r\n  IServiceRequestParamsWithPagination,\r\n} from \"./interfaces\";\r\nimport { UserContext } from \"../context/User\";\r\nimport {\r\n  serverReducerFactory,\r\n  fetchFunctionFactory,\r\n  postFunctionFactory,\r\n  pageControlsFactory,\r\n  fetchMenuOptionFunctionFactory,\r\n  deleteByIdFunctionFactory,\r\n} from \"./helpers\";\r\nimport { MenuOption } from \"../components/Layout/FilterDropdown\";\r\n\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\nconst contactsDataUri = localapi + \"contacts\";\r\n\r\nconst InitialState: IServiceState<Contacts, IContactFilters> = {\r\n  filters: { search: \"\", role: \"c\", order: \"name\" },\r\n  offset: 0,\r\n  count: 0,\r\n  results: {\r\n    status: \"loading\",\r\n    payload: null,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst reducer = serverReducerFactory<Contacts, IContactFilters>();\r\n\r\n//debería comenzar a hacer error handling con toasts\r\n\r\n//esto se puede abstraer aun mas\r\nconst useContactsService = () => {\r\n  const [state, dispatch] = useReducer(reducer, InitialState);\r\n  const { filters, offset, count } = state;\r\n\r\n  //token para autorizar las peticiones\r\n  const {\r\n    store: { token },\r\n  } = useContext(UserContext);\r\n\r\n  const { updateFilters, loadMoreData } = pageControlsFactory<IContactFilters>(\r\n    dispatch,\r\n    offset\r\n  );\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchContacts = useCallback(\r\n    (params: IServiceRequestParamsWithPagination, filters: IContactFilters) => {\r\n      fetchFunctionFactory<ServerContact, IContactFilters>(\r\n        contactsDataUri,\r\n        dispatch\r\n      )(params, filters);\r\n    },\r\n    []\r\n  );\r\n\r\n  const [contactsMenu, setContactsMenu] = useState<MenuOption[]>([]);\r\n\r\n  const fetchContactsMinified = useCallback(() => {\r\n    fetchMenuOptionFunctionFactory(\r\n      `${contactsDataUri}/menu`,\r\n      token,\r\n      setContactsMenu\r\n    )();\r\n  }, [token]);\r\n\r\n  //actualiza un contacto y despues refresca los datos con offset en 0\r\n  const postOrUpdateContact = (data: Contact) =>\r\n    postFunctionFactory<Contact>(contactsDataUri, token, () =>\r\n      fetchContacts({ token, offset: 0 }, filters)\r\n    )(data, data.contact_id);\r\n\r\n  const deleteContactById = (id: number) =>\r\n    deleteByIdFunctionFactory(contactsDataUri, \"contact_id\", token, () =>\r\n      fetchContacts({ token, offset: 0 }, filters)\r\n    )(id);\r\n\r\n  //un listener que se triggerea en el primer render y cada vez que se cambian los filtros o el offset\r\n  useEffect(() => {\r\n    fetchContacts({ offset, token }, filters);\r\n  }, [filters, count, offset, token, fetchContacts]);\r\n\r\n  return {\r\n    result: state.results,\r\n    count: state.count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateContact,\r\n    contactsMenu,\r\n    fetchContactsMinified,\r\n    deleteContactById\r\n  };\r\n};\r\n\r\nexport default useContactsService;\r\n","import { useEffect, useContext, useReducer, useCallback } from \"react\";\r\nimport {\r\n  ServerExpense,\r\n  Expenses,\r\n  Category,\r\n  IServiceState,\r\n  IExpenseFilters,\r\n  IServiceRequestParamsWithPagination,\r\n  Expense,\r\n} from \"./interfaces\";\r\nimport { UserContext } from \"../context/User\";\r\nimport {\r\n  serverReducerFactory,\r\n  fetchCategoryFunctionFactory,\r\n  fetchFunctionFactory,\r\n  postFunctionFactory,\r\n  deleteByIdFunctionFactory,\r\n  pageControlsFactory,\r\n} from \"./helpers\";\r\n\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\nconst expensesDataUri = localapi + \"expenses\";\r\nconst expenseCategoriesDataUri = expensesDataUri + \"/categories\";\r\n\r\nconst InitialState: IServiceState<Expenses, IExpenseFilters> = {\r\n  categories: null,\r\n  filters: { search: \"\", category_id: null, order: \"created_at\" },\r\n  offset: 0,\r\n  count: 0,\r\n  results: {\r\n    status: \"loading\",\r\n    payload: null,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst reducer = serverReducerFactory<Expenses, IExpenseFilters>();\r\n\r\n//debería comenzar a hacer error handling con toasts\r\n\r\nconst useExpensesService = () => {\r\n  const [state, dispatch] = useReducer(reducer, InitialState);\r\n  const { filters, offset, categories } = state;\r\n\r\n  //token para autorizar las peticiones\r\n  const {\r\n    store: { token },\r\n  } = useContext(UserContext);\r\n\r\n  const {updateFilters,loadMoreData} = pageControlsFactory<IExpenseFilters>(dispatch,offset);\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchExpenseCategories = useCallback(() => {\r\n    fetchCategoryFunctionFactory(expenseCategoriesDataUri, token, dispatch)();\r\n  }, [token]);\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchExpenses = useCallback(\r\n    (params: IServiceRequestParamsWithPagination, filters: IExpenseFilters) => {\r\n      fetchFunctionFactory<ServerExpense, IExpenseFilters>(\r\n        expensesDataUri,\r\n        dispatch\r\n      )(params, filters);\r\n    },\r\n    []\r\n  );\r\n\r\n  //actualiza un gasto y despues refresca los datos con offset en 0\r\n  const postOrUpdateExpense = (data: Expense) =>\r\n    postFunctionFactory<Expense>(\r\n      expensesDataUri,\r\n      token,\r\n      ()=>fetchExpenses({ token, offset: 0 }, filters)\r\n    )(data, data.expense_id);\r\n\r\n  const postOrUpdateExpenseCategory = (data: Category) =>\r\n    postFunctionFactory<Category>(\r\n      expenseCategoriesDataUri,\r\n      token,\r\n      fetchExpenseCategories\r\n    )(data, data.category_id);\r\n\r\n  //elimina una categoria por id\r\n  const deleteExpenseCategoryById = (id: number) =>\r\n    deleteByIdFunctionFactory(\r\n      expenseCategoriesDataUri,\r\n      \"category_id\",\r\n      token,\r\n      ()=>fetchExpenseCategories()\r\n    )(id);\r\n\r\n  //elimina un gasto por id\r\n  const deleteExpenseById = (id: number) =>\r\n  deleteByIdFunctionFactory(\r\n    expensesDataUri,\r\n    \"expense_id\",\r\n    token,\r\n    ()=>fetchExpenses({ token, offset: 0 }, filters)\r\n  )(id);\r\n\r\n  //un listener que se triggerea en el primer render y cada vez que se cambian los filtros o el offset\r\n  useEffect(() => {\r\n    fetchExpenses({ token, offset: 0 }, filters)\r\n  }, [token, filters, fetchExpenses]);\r\n\r\n  return {\r\n    result: state.results,\r\n    count: state.count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateExpense,\r\n    fetchExpenseCategories,\r\n    postOrUpdateExpenseCategory,\r\n    deleteExpenseCategoryById,\r\n    deleteExpenseById,\r\n    categories,\r\n    category_id : filters.category_id,\r\n  };\r\n};\r\n\r\nexport default useExpensesService;\r\n","import {\r\n  useEffect,\r\n  useContext,\r\n  useReducer,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  ServerProduct,\r\n  Products,\r\n  Category,\r\n  IServiceState,\r\n  IProductFilters,\r\n  IServiceRequestParamsWithPagination,\r\n  Product,\r\n  MinifiedProduct,\r\n  MinifiedProducts,\r\n  PostProduct,\r\n} from \"./interfaces\";\r\nimport { UserContext } from \"../context/User\";\r\nimport {\r\n  serverReducerFactory,\r\n  fetchCategoryFunctionFactory,\r\n  fetchFunctionFactory,\r\n  postFunctionFactory,\r\n  deleteByIdFunctionFactory,\r\n  pageControlsFactory,\r\n} from \"./helpers\";\r\nimport Axios, { AxiosResponse } from \"axios\";\r\n\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\nexport const productsDataUri = localapi + \"products\";\r\nexport const productCategoriesDataUri = productsDataUri + \"/categories\";\r\n\r\nconst InitialState: IServiceState<Products, IProductFilters> = {\r\n  categories: null,\r\n  filters: { search: \"\", category_id: null, order: \"name\" },\r\n  offset: 0,\r\n  count: 0,\r\n  results: {\r\n    status: \"loading\",\r\n    payload: null,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst reducer = serverReducerFactory<Products, IProductFilters>();\r\n\r\n//debería comenzar a hacer error handling con toasts\r\n\r\nconst useProductsService = () => {\r\n  const [state, dispatch] = useReducer(reducer, InitialState);\r\n  const { filters, offset, categories } = state;\r\n\r\n  //token para autorizar las peticiones\r\n  const {\r\n    store: { token },\r\n  } = useContext(UserContext);\r\n\r\n  const { updateFilters, loadMoreData } = pageControlsFactory<IProductFilters>(\r\n    dispatch,\r\n    offset\r\n  );\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchProductCategories = useCallback(() => {\r\n    fetchCategoryFunctionFactory(productCategoriesDataUri, token, dispatch)();\r\n  }, [token]);\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchProducts = useCallback(\r\n    (params: IServiceRequestParamsWithPagination, filters: IProductFilters) => {\r\n      fetchFunctionFactory<ServerProduct, IProductFilters>(\r\n        productsDataUri,\r\n        dispatch\r\n      )(params, filters);\r\n    },\r\n    []\r\n  );\r\n\r\n  const [minifiedProductsList, setMinifiedProductsList] = useState<\r\n    MinifiedProduct[] | null\r\n  >(null);\r\n\r\n  const fetchMinifiedProductsList = useCallback(() => {\r\n    Axios.get(`${productsDataUri}/list`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }).then((response: AxiosResponse<MinifiedProducts>) =>\r\n      setMinifiedProductsList(response.data.result)\r\n    );\r\n  }, [token]);\r\n\r\n  //actualiza un producto y despues refresca los datos con offset en 0\r\n  const postOrUpdateProduct = (data: PostProduct) =>\r\n    postFunctionFactory<PostProduct>(productsDataUri, token, () =>\r\n      fetchProducts({ token, offset: 0 }, filters)\r\n    )(data, data.product_id);\r\n\r\n  const postOrUpdateProductCategory = (data: Category) =>\r\n    postFunctionFactory<Category>(\r\n      productCategoriesDataUri,\r\n      token,\r\n      fetchProductCategories\r\n    )(data, data.category_id);\r\n\r\n  //elimina una categoria por id\r\n  const deleteProductCategoryById = (id: number) =>\r\n    deleteByIdFunctionFactory(\r\n      productCategoriesDataUri,\r\n      \"category_id\",\r\n      token,\r\n      () => fetchProductCategories()\r\n    )(id);\r\n\r\n  //elimina un producto por id\r\n  const deleteProductById = (id: number) =>\r\n    deleteByIdFunctionFactory(productsDataUri, \"product_id\", token, () =>\r\n      fetchProducts({ token, offset: 0 }, filters)\r\n    )(id);\r\n\r\n  //un listener que se triggerea en el primer render y cada vez que se cambian los filtros o el offset\r\n  useEffect(() => {\r\n    fetchProducts({ token, offset: 0 }, filters);\r\n  }, [token, filters, fetchProducts]);\r\n\r\n  return {\r\n    result: state.results,\r\n    count: state.count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateProduct,\r\n    fetchProductCategories,\r\n    postOrUpdateProductCategory,\r\n    deleteProductCategoryById,\r\n    deleteProductById,\r\n    categories,\r\n    category_id: filters.category_id,\r\n    minifiedProductsList,\r\n    fetchMinifiedProductsList\r\n  };\r\n};\r\n\r\nexport default useProductsService;\r\n","import {\r\n  useEffect,\r\n  useContext,\r\n  useReducer,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  IServiceState,\r\n  Orders,\r\n  IOrderFilters,\r\n  ServerOrder,\r\n  IServiceRequestParamsWithPagination,\r\n  postOrUpdateOrder,\r\n  OrderProduct,\r\n  OrderProducts,\r\n  PostOrderProduct,\r\n  DeleteOrderProduct,\r\n  PostMarkDelivered,\r\n  PostTransaction,\r\n  PostMarkCompleted,\r\n} from \"./interfaces\";\r\nimport { UserContext } from \"../context/User\";\r\nimport {\r\n  serverReducerFactory,\r\n  fetchFunctionFactory,\r\n  postFunctionFactory,\r\n  pageControlsFactory,\r\n  deleteByIdFunctionFactory,\r\n} from \"./helpers\";\r\nimport Axios, { AxiosResponse } from \"axios\";\r\n\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\nconst ordersDataUri = localapi + \"orders\";\r\n\r\nconst InitialState: IServiceState<Orders, IOrderFilters> = {\r\n  filters: {\r\n    search: \"\",\r\n    type: \"b\",\r\n    completed: \"not_completed\",\r\n    delivered: \"all\" /* , order: \"name\" */,\r\n  },\r\n  offset: 0,\r\n  count: 0,\r\n  results: {\r\n    status: \"loading\",\r\n    payload: null,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst reducer = serverReducerFactory<Orders, IOrderFilters>();\r\n\r\n//debería comenzar a hacer error handling con toasts\r\n\r\n//esto se puede abstraer aun mas\r\nconst useOrdersService = () => {\r\n  const [state, dispatch] = useReducer(reducer, InitialState);\r\n  const { filters, offset, count } = state;\r\n\r\n  //token para autorizar las peticiones\r\n  const {\r\n    store: { token },\r\n  } = useContext(UserContext);\r\n\r\n  const { updateFilters, loadMoreData } = pageControlsFactory<IOrderFilters>(\r\n    dispatch,\r\n    offset\r\n  );\r\n\r\n  //esto queda fuera del reducer porque es muy especifico\r\n  const [orderProducts, setOrderProducts] = useState<OrderProduct[] | null>(\r\n    null\r\n  );\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchOrders = useCallback(\r\n    (params: IServiceRequestParamsWithPagination, filters: IOrderFilters) => {\r\n      fetchFunctionFactory<ServerOrder, IOrderFilters>(ordersDataUri, dispatch)(\r\n        params,\r\n        filters\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  const update = useCallback(() => fetchOrders({ offset: 0, token }, filters), [\r\n    fetchOrders,\r\n    filters,\r\n    token,\r\n  ]);\r\n\r\n  //funcion que obtiene los productos de un pedido\r\n  const fetchOrderProductsByOrderId = useCallback(\r\n    (order_id: number, callback?: () => void) => {\r\n      Axios.get<OrderProducts>(`${ordersDataUri}/id/products`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        params: { order_id },\r\n      }).then((response: AxiosResponse<OrderProducts>) => {\r\n        setOrderProducts(response.data.result);\r\n        if (callback) {\r\n          callback();\r\n        }\r\n        console.log(response);\r\n      }).catch(err=>console.log(err));\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const postOrderProduct = useCallback(\r\n    (data: PostOrderProduct, callback?: () => void) => {\r\n      Axios.request<PostOrderProduct>({\r\n        url: `${ordersDataUri}/products`,\r\n        method: \"POST\",\r\n        data,\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n        .then(() => {\r\n          fetchOrderProductsByOrderId(\r\n            data.order_id,\r\n            callback ? callback : () => ({})\r\n          );\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    [fetchOrderProductsByOrderId, token]\r\n  );\r\n\r\n  const deleteOrderProduct = useCallback(\r\n    (data: DeleteOrderProduct) => {\r\n      Axios.request<DeleteOrderProduct>({\r\n        url: `${ordersDataUri}/products`,\r\n        method: \"DELETE\",\r\n        data,\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      }).then(() => {\r\n        fetchOrderProductsByOrderId(data.order_id);\r\n      });\r\n    },\r\n    [fetchOrderProductsByOrderId, token]\r\n  );\r\n\r\n  const markDelivered = useCallback(\r\n    (data: PostMarkDelivered) => {\r\n      Axios.request<PostMarkDelivered>({\r\n        url: `${ordersDataUri}/products/delivered`,\r\n        method: \"POST\",\r\n        data,\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n        .then(() => {\r\n          update();\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    [token, update]\r\n  );\r\n\r\n  const postTransaction = useCallback(\r\n    (data: PostTransaction) => {\r\n      Axios.request<PostTransaction>({\r\n        url: `${ordersDataUri}/transactions`,\r\n        method: \"POST\",\r\n        data,\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n        .then(() => {\r\n          update();\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    [token, update]\r\n  );\r\n\r\n  const markCompleted = useCallback(\r\n    (data: PostMarkCompleted) => {\r\n      Axios.request<PostMarkCompleted>({\r\n        url: `${ordersDataUri}/completed`,\r\n        method: \"POST\",\r\n        data,\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n        .then(() => {\r\n          update();\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    [token, update]\r\n  );\r\n\r\n\r\n  const deleteOrderById = (id: number) =>\r\n    deleteByIdFunctionFactory(ordersDataUri, \"order_id\", token, () =>\r\n      fetchOrders({ token, offset: 0 }, filters)\r\n    )(id);\r\n\r\n  //actualiza un pedido y despues refresca los datos con offset en 0\r\n  const postOrUpdateOrder = (data: postOrUpdateOrder) => {\r\n    postFunctionFactory<postOrUpdateOrder>(ordersDataUri, token, () =>\r\n      fetchOrders({ token, offset: 0 }, filters)\r\n    )(data, data.order_id);\r\n    console.log(data);\r\n  };\r\n\r\n  //un listener que se triggerea en el primer render y cada vez que se cambian los filtros o el offset\r\n  useEffect(() => {\r\n    fetchOrders({ offset, token }, filters);\r\n  }, [filters, count, offset, token, fetchOrders]);\r\n\r\n  return {\r\n    result: state.results,\r\n    count: state.count,\r\n    updateFilters,\r\n    update,\r\n    loadMoreData,\r\n    postOrUpdateOrder,\r\n    deleteOrderById,\r\n    fetchOrderProductsByOrderId,\r\n    orderProducts,\r\n    postOrderProduct,\r\n    deleteOrderProduct,\r\n    markDelivered,\r\n    postTransaction,\r\n    markCompleted\r\n  };\r\n};\r\n\r\nexport default useOrdersService;\r\n","import { useEffect, useContext, useReducer, useCallback, useState } from \"react\";\r\nimport {\r\n  Transaction,\r\n  IServiceState,\r\n  Transactions,\r\n  ITransactionFilters,\r\n  ServerTransaction,\r\n  IServiceRequestParamsWithPagination,\r\n  UpdateTransaction,\r\n} from \"./interfaces\";\r\nimport { UserContext } from \"../context/User\";\r\nimport {\r\n  serverReducerFactory,\r\n  fetchFunctionFactory,\r\n  postFunctionFactory,\r\n  pageControlsFactory,\r\n  fetchMenuOptionFunctionFactory,\r\n} from \"./helpers\";\r\nimport { MenuOption } from \"../components/Layout/FilterDropdown\";\r\n\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\nconst contactsDataUri = localapi + \"transactions\";\r\n\r\nconst InitialState: IServiceState<Transactions, ITransactionFilters> = {\r\n  filters: { search: \"\", type: \"b\", order: \"name\" },\r\n  offset: 0,\r\n  count: 0,\r\n  results: {\r\n    status: \"loading\",\r\n    payload: null,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst reducer = serverReducerFactory<Transactions, ITransactionFilters>();\r\n\r\n//debería comenzar a hacer error handling con toasts\r\n\r\n//esto se puede abstraer aun mas\r\nconst useTransactionsService = () => {\r\n  const [state, dispatch] = useReducer(reducer, InitialState);\r\n  const { filters, offset, count } = state;\r\n\r\n  //token para autorizar las peticiones\r\n  const {\r\n    store: { token },\r\n  } = useContext(UserContext);\r\n\r\n  const {updateFilters,loadMoreData} = pageControlsFactory<ITransactionFilters>(dispatch,offset);\r\n\r\n  //funcion que obtiene los datos del server\r\n  const fetchTransactions = useCallback(\r\n    (params: IServiceRequestParamsWithPagination, filters: ITransactionFilters) => {\r\n      fetchFunctionFactory<ServerTransaction, ITransactionFilters>(\r\n        contactsDataUri,\r\n        dispatch\r\n      )(params, filters);\r\n    },\r\n    []\r\n  );\r\n\r\n  //actualiza un contacto y despues refresca los datos con offset en 0\r\n  const UpdateTransactionByID = (data: UpdateTransaction) =>\r\n    postFunctionFactory<UpdateTransaction>(\r\n      contactsDataUri,\r\n      token,\r\n      ()=>fetchTransactions({ token, offset: 0 }, filters)\r\n    )(data, data.transaction_id);\r\n\r\n  //un listener que se triggerea en el primer render y cada vez que se cambian los filtros o el offset\r\n  useEffect(() => {\r\n    fetchTransactions({ offset, token }, filters);\r\n  }, [filters, count, offset, token, fetchTransactions]);\r\n\r\n  return {\r\n    result: state.results,\r\n    count: state.count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    UpdateTransactionByID\r\n  };\r\n};\r\n\r\nexport default useTransactionsService;\r\n","export {default as useContactsService} from './useContactsService';\r\nexport {default as useExpensesService} from './useExpensesService';\r\nexport {default as useProductsService} from './useProductsService';\r\nexport {default as useOrdersService} from './useOrdersService';\r\nexport {default as useTransactionsService} from './useTransactionsService';\r\nexport const dateHelper = (date:Date) => {\r\n    return `${date.getDay()}/${date.getMonth()}/${date.getFullYear()} - ${date.getHours()}:${date.getMinutes()<10 ? `0${date.getMinutes()}` : date.getMinutes()}`;\r\n\r\n}\r\n","import React from \"react\";\r\nimport { FilterStack, FilterDropdown } from \"../Layout\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Input, FormControl } from \"@chakra-ui/core\";\r\nimport { MenuOption } from \"../Layout/FilterDropdown\";\r\n\r\ntype DropdownFilter = {\r\n  name: string;\r\n  menu: MenuOption[];\r\n  defaultValue: any;\r\n};\r\n\r\ntype SearchFilter = {\r\n  name: string;\r\n  defaultValue: string;\r\n  placeholder: string;\r\n};\r\n\r\ninterface filterConfig {\r\n  searchBar?: SearchFilter;\r\n  dropdowns?: DropdownFilter[];\r\n}\r\n\r\ninterface IFilterFormProps {\r\n  updateFilters: (filters: any) => void;\r\n  filtersData: filterConfig;\r\n}\r\n\r\n//TOMA UN FUNCION PARA SETEAR LAS VARIABLES DE LOS FILTROS, Y UN OBJETO CON UN POSIBLE SEARCHBAR Y UN ARREGLO DE DROPDOWNS\r\n\r\nconst FilterForm: React.FC<IFilterFormProps> = ({\r\n  updateFilters,\r\n  filtersData,\r\n}) => {\r\n  const { register, handleSubmit, control } = useForm();\r\n  const onSubmit = handleSubmit((filters) => {\r\n    updateFilters(filters);\r\n  });\r\n  return (\r\n    <FormControl>\r\n      <form onSubmit={onSubmit} onChange={onSubmit}>\r\n        <FilterStack>\r\n          {filtersData.searchBar && (\r\n            <Input\r\n              name={filtersData.searchBar.name}\r\n              placeholder={filtersData.searchBar.placeholder}\r\n              defaultValue={filtersData.searchBar.defaultValue}\r\n              ref={register}\r\n            />\r\n          )}\r\n          {filtersData.dropdowns &&\r\n            filtersData.dropdowns.map(({ name, menu, defaultValue }) => {\r\n              return (\r\n                <Controller\r\n                  defaultValue={\r\n                    defaultValue\r\n                  }\r\n                  control={control}\r\n                  name={name}\r\n                  as={({ onChange, value, name }) => (\r\n                    <FilterDropdown\r\n                      menu={menu}\r\n                      onChange={(e) => onChange(e.target.value)}\r\n                      defaultValue={value}\r\n                      name={name}\r\n                    />\r\n                  )}\r\n                />\r\n              );\r\n            })}\r\n        </FilterStack>\r\n      </form>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FilterForm;\r\n","import React from \"react\";\r\nimport { FilterStack, SubText } from \"../Layout\";\r\nimport { useForm, ValidationOptions, Controller } from \"react-hook-form\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerCloseButton,\r\n  DrawerHeader,\r\n  DrawerContent,\r\n  DrawerBody,\r\n  InputGroup,\r\n  Button,\r\n  InputLeftAddon,\r\n  FormErrorMessage,\r\n  Flex,\r\n  Box,\r\n  FormHelperText,\r\n  Text,\r\n} from \"@chakra-ui/core\";\r\nimport FilterDropdown, { MenuOption } from \"../Layout/FilterDropdown\";\r\n\r\ntype FormInput = {\r\n  name: string;\r\n  title: string;\r\n  defaultValue: NonNullable<any>;\r\n  validationRules: ValidationOptions;\r\n  options?: MenuOption[] | null;\r\n  formHelperText?: string;\r\n  maxW?: string;\r\n};\r\n\r\ninterface IDrawerFormProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title: string;\r\n  subtitle?: string;\r\n  subsubtitle?: string;\r\n  inputs: FormInput[];\r\n  onFormSubmit: (values: Record<string, any>) => void;\r\n  deleteFunction?: (id: number) => void;\r\n  deleteFieldName?: string;\r\n}\r\n\r\nconst DrawerForm: React.FC<IDrawerFormProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  subtitle,\r\n  subsubtitle,\r\n  inputs,\r\n  onFormSubmit,\r\n  deleteFunction,\r\n  deleteFieldName,\r\n}) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState,\r\n    errors,\r\n    control,\r\n    getValues,\r\n  } = useForm();\r\n\r\n  const onSubmit = handleSubmit((values) => {\r\n    onFormSubmit(values);\r\n    onClose();\r\n  });\r\n\r\n  const onDelete = (\r\n    deleteFieldName: string,\r\n    deleteFunction: (id: number) => void\r\n  ) => {\r\n    const itemID = getValues(deleteFieldName);\r\n    deleteFunction(itemID);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Drawer isOpen={isOpen} onClose={onClose} placement=\"bottom\">\r\n      <DrawerOverlay />\r\n      <DrawerContent maxHeight=\"100vh\" overflowY=\"scroll\">\r\n        <DrawerCloseButton />\r\n        <DrawerHeader>\r\n          {title}\r\n          <Text></Text>\r\n          {subtitle && <SubText>{subtitle}</SubText>}\r\n          {subsubtitle && <SubText>{subsubtitle}</SubText>}\r\n        </DrawerHeader>\r\n        <DrawerBody>\r\n          {/* ESTA MINIFUNCION EN EL FORMCONTROL BUSCA SI TIENE ERRORES EL OBJETO, HACIENDO TYPECASTING A BOOLEAN TODAS SUS PROPIEDADES */}\r\n          <FormControl\r\n            isInvalid={Object.values(errors).find((value) => !!value)}\r\n          >\r\n            <form onSubmit={onSubmit}>\r\n              <FilterStack>\r\n                {inputs.map(\r\n                  ({\r\n                    name,\r\n                    title,\r\n                    defaultValue,\r\n                    validationRules,\r\n                    options,\r\n                    formHelperText,\r\n                    maxW,\r\n                  }) => (\r\n                    <>\r\n                      {errors[name] && errors[name].message && (\r\n                        <FormErrorMessage>\r\n                          {errors[name].message}\r\n                        </FormErrorMessage>\r\n                      )}\r\n                      <Box>\r\n                        <InputGroup display=\"flex\">\r\n                          <InputLeftAddon children={title} flexGrow={1} />\r\n                          {/* SI EL OBJETO TIENE OPCIONES, TIENE QUE SER DROPDOWN */}\r\n                          {options ? (\r\n                            <Controller\r\n                              defaultValue={\r\n                                defaultValue\r\n                                  ? defaultValue\r\n                                  : options[0]\r\n                                  ? options[0].value\r\n                                    ? options[0].value\r\n                                    : 0\r\n                                  : 0\r\n                              }\r\n                              rules={validationRules}\r\n                              control={control}\r\n                              name={name}\r\n                              as={({ onChange, value, name }) => (\r\n                                <FilterDropdown\r\n                                  menu={options}\r\n                                  onChange={(e) => {\r\n                                    onChange(e.target.value);\r\n                                  }}\r\n                                  defaultValue={value}\r\n                                  name={name}\r\n                                />\r\n                              )}\r\n                            />\r\n                          ) : (\r\n                            <Input\r\n                              name={name}\r\n                              defaultValue={defaultValue}\r\n                              ref={register(validationRules)}\r\n                              maxW={maxW ? maxW : \"initial\"}\r\n                            />\r\n                          )}\r\n                        </InputGroup>\r\n                        {formHelperText && (\r\n                          <FormHelperText mb=\"10px\">\r\n                            {formHelperText}\r\n                          </FormHelperText>\r\n                        )}\r\n                      </Box>\r\n                    </>\r\n                  )\r\n                )}\r\n                <Flex justify=\"flex-end\">\r\n                  {/* BOTON QUE SOLO APARECE SI LE DOY UNA FUNCION PARA ELIMINAR E INDICO COMO IDENTIFICAR QUE ELIMINAR */}\r\n                  {deleteFunction && deleteFieldName && (\r\n                    <Button\r\n                      mt={4}\r\n                      variantColor=\"red\"\r\n                      isLoading={formState.isSubmitting}\r\n                      onClick={() => onDelete(deleteFieldName, deleteFunction)}\r\n                      float=\"right\"\r\n                    >\r\n                      Borrar\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    mt={4}\r\n                    ml={4}\r\n                    variantColor=\"teal\"\r\n                    isLoading={formState.isSubmitting}\r\n                    type=\"submit\"\r\n                    float=\"right\"\r\n                  >\r\n                    Guardar\r\n                  </Button>\r\n                </Flex>\r\n              </FilterStack>\r\n            </form>\r\n          </FormControl>\r\n        </DrawerBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default DrawerForm;\r\n","import React from \"react\";\r\nimport { FilterForm } from \"../../components/Forms\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\ninterface IProductsFilterFormProps {\r\n  updateFilters: (filters: any) => void;\r\n  categories: MenuOption[] | null;\r\n}\r\n\r\nconst ProductsFilterForm: React.FC<IProductsFilterFormProps> = ({\r\n  updateFilters,\r\n  categories,\r\n}) => {\r\n  return (\r\n    <FilterForm\r\n      updateFilters={updateFilters}\r\n      filtersData={{\r\n        searchBar: {\r\n          name: \"search\",\r\n          defaultValue: \"\",\r\n          placeholder: \"Buscar...\",\r\n        },\r\n        dropdowns: [\r\n          {\r\n            name: \"category_id\",\r\n            // el valor 0 el server identifica como \"todas las categorías\"\r\n            menu: categories\r\n              ? [{ name: \"Todas las categorías\", value: \"0\" }, ...categories]\r\n              : [{ name: \"...\", value: \"0\" }],\r\n            defaultValue: 0,\r\n          },\r\n          {\r\n            name: \"order\",\r\n            menu: [\r\n              { name: \"Ordenar por nombre\", value: \"name\" },\r\n              { name: \"Ordenar por stock\", value: \"stock\" },\r\n              {\r\n                name: \"Ordenar por fecha de actualización\",\r\n                value: \"updated_at\",\r\n              },\r\n              { name: \"Ordenar por precio de venta\", value: \"sell_price\" },\r\n              { name: \"Ordenar por precio de compra\", value: \"buy_price\" },\r\n            ],\r\n            defaultValue: \"name\",\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductsFilterForm;\r\n","import React from \"react\";\r\nimport { Box, Text, Flex } from \"@chakra-ui/core\";\r\nimport { SubText, MoneyText, ListItemBox } from \"../Layout\";\r\nimport { dateHelper } from \"../../services\";\r\nimport { FaCartArrowDown, FaCoins } from \"react-icons/fa\";\r\n\r\ninterface IStockListItemProps {\r\n  title: string;\r\n  ammount: number;\r\n  buyPrice: number;\r\n  sellPrice: number;\r\n  updatedAt: Date;\r\n  onClick: () => void;\r\n}\r\n\r\n//Item de stock, el div en la raiz fue necesario porque de no hacerlo tendria que haber hecho prop drilling con la prop \"onClick\" hasta el componente de la librería de chakra\r\nconst StockListItem: React.FC<IStockListItemProps> = ({\r\n  title,\r\n  ammount,\r\n  buyPrice,\r\n  sellPrice,\r\n  updatedAt,\r\n  onClick,\r\n}) => {\r\n  const updatedAtDate = new Date(updatedAt);\r\n  const formattedUpdatedAtDate = dateHelper(updatedAtDate);\r\n  return (\r\n    <div onClick={() => onClick()}>\r\n      <ListItemBox>\r\n        <Flex direction=\"column\" textAlign=\"left\">\r\n          <Text>{title}</Text>\r\n          <SubText>\r\n            {ammount} {ammount > 1 ? \"unidades\" : \"unidad\"}\r\n          </SubText>\r\n        </Flex>\r\n        <Box flexDirection=\"column\" textAlign=\"right\" alignItems=\"right\" maxWidth=\"40%\">\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" flexWrap=\"wrap\" maxWidth=\"100%\" alignItems=\"right\">\r\n            <Box display=\"flex\" m=\"5px\" mr=\"0\" flexDirection=\"column\" alignItems={buyPrice<10000?\"center\":\"flex-end\"} textAlign=\"center\">\r\n              <Box mr={buyPrice<10000?\"0\":\"1\"} as={FaCartArrowDown}/>\r\n              <MoneyText red ammount={buyPrice} />\r\n            </Box>\r\n            <Box display=\"flex\" m=\"5px\" mr=\"0\" flexDirection=\"column\" alignItems={sellPrice<10000?\"center\":\"flex-end\"} textAlign=\"center\">\r\n              <Box mr={sellPrice<10000?\"0\":\"1\"} as={FaCoins}/>\r\n              <MoneyText ammount={sellPrice} />\r\n            </Box>\r\n          </Box>\r\n          <SubText>{formattedUpdatedAtDate}</SubText>\r\n        </Box>\r\n      </ListItemBox>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockListItem;\r\n","import React from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/core\";\r\nimport { SubText, MoneyText, ListItemBox } from \"../Layout\";\r\nimport { FaMapMarkedAlt, FaPhoneAlt } from \"react-icons/fa\";\r\nimport { dateHelper } from \"../../services\";\r\n\r\ninterface IContactsListItemProps {\r\n  name: string;\r\n  address: string;\r\n  phone: string;\r\n  money: number;\r\n  updatedAt: Date;\r\n  onClick: () => void;\r\n}\r\n\r\n//Item de contactos, el div en la raiz fue necesario porque de no hacerlo tendria que haber hecho prop drilling con la prop \"onClick\" hasta el componente de la librería de chakra\r\nconst ContactsListItem: React.FC<IContactsListItemProps> = ({\r\n  name,\r\n  address,\r\n  phone,\r\n  money,\r\n  updatedAt,\r\n  onClick,\r\n}) => {\r\n  const updatedAtDate = new Date(updatedAt);\r\n  const formattedUpdatedAtDate = dateHelper(updatedAtDate);\r\n  return (\r\n    <div onClick={() => onClick()}>\r\n      <ListItemBox>\r\n        <Box display=\"flex\" flexDirection=\"column\" textAlign=\"left\">\r\n          <Text>{name}</Text>\r\n          <SubText>\r\n            <Box as={FaMapMarkedAlt} display=\"inline\" mr=\"5px\"/>\r\n            {address}\r\n          </SubText>\r\n          <SubText>\r\n            <Box as={FaPhoneAlt} display=\"inline\" mr=\"5px\"/>\r\n            {phone}\r\n          </SubText>\r\n        </Box>\r\n        <Box display=\"flex\" flexDirection=\"column\" textAlign=\"right\" justifyContent=\"space-between\">\r\n          <Box><Text display=\"inline\">{money>0 ? \"A favor\" : \"Deuda\"}: </Text><MoneyText ammount={money}/></Box>\r\n          <SubText>{formattedUpdatedAtDate}</SubText>\r\n        </Box>\r\n      </ListItemBox>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import React from \"react\";\r\nimport { Box, Text, Checkbox } from \"@chakra-ui/core\";\r\nimport { SubText, MoneyText, ListItemBox } from \"../Layout\";\r\nimport { dateHelper } from \"../../services\";\r\n\r\ninterface IOrdersListItemProps {\r\n  name: string;\r\n  itemAmmount: number;\r\n  delivered: boolean;\r\n  sum: number;\r\n  debt: number;\r\n  updatedAt: Date;\r\n  onClick: () => void;\r\n}\r\n\r\n//Item de pedidos, el div en la raiz fue necesario porque de no hacerlo tendria que haber hecho prop drilling con la prop \"onClick\" hasta el componente de la librería de chakra\r\nconst OrdersListItem: React.FC<IOrdersListItemProps> = ({\r\n  name,\r\n  itemAmmount,\r\n  delivered,\r\n  sum,\r\n  debt,\r\n  updatedAt,\r\n  onClick,\r\n}) => {\r\n  const updatedAtDate = new Date(updatedAt);\r\n  const formattedUpdatedAtDate = dateHelper(updatedAtDate);\r\n  return (\r\n    <div onClick={() => onClick()}>\r\n      <ListItemBox>\r\n        <Box display=\"flex\" flexDirection=\"column\" textAlign=\"left\">\r\n          <Text>{name}</Text>\r\n          <SubText>\r\n            {itemAmmount} {itemAmmount > 1 ? \"items\" : \"item\"}\r\n          </SubText>\r\n          <SubText>\r\n            <Checkbox isChecked={delivered} size=\"sm\">\r\n              Entregado\r\n            </Checkbox>\r\n          </SubText>\r\n        </Box>\r\n        <Box display=\"flex\" flexDirection=\"column\" textAlign=\"right\">\r\n          <Box>\r\n            <Text display=\"inline\"> Suma: </Text>\r\n            <MoneyText ammount={sum} />\r\n          </Box>\r\n          {\r\n            debt >=0 ?\r\n            <Box>\r\n              <Text display=\"inline\"> Falta pagar: </Text>\r\n              <MoneyText ammount={debt} red />\r\n            </Box> :\r\n            <Box>\r\n            <Text display=\"inline\"> Quedó a favor: </Text>\r\n            <MoneyText ammount={-debt} />\r\n          </Box>\r\n          }\r\n          <SubText>{formattedUpdatedAtDate}</SubText>\r\n        </Box>\r\n      </ListItemBox>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersListItem;\r\n","import React from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/core\";\r\nimport { SubText, MoneyText, ListItemBox } from \"../Layout\";\r\nimport { dateHelper } from \"../../services\";\r\n\r\ninterface ITransactionsListItemProps {\r\n  title: string;\r\n  sum: number;\r\n  createdAt: Date;\r\n  onClick: () => void;\r\n}\r\n\r\n//Item de stock, el div en la raiz fue necesario porque de no hacerlo tendria que haber hecho prop drilling con la prop \"onClick\" hasta el componente de la librería de chakra\r\nconst TransactionsListItem: React.FC<ITransactionsListItemProps> = ({\r\n  title,\r\n  sum,\r\n  createdAt,\r\n  onClick,\r\n}) => {\r\n  const createdAtDate = new Date(createdAt);\r\n  const formattedCreatedAtDate = dateHelper(createdAtDate);\r\n  return (\r\n    <div onClick={()=>onClick()}>\r\n      <ListItemBox>\r\n        <Box display=\"flex\" flexDirection=\"column\" textAlign=\"left\">\r\n          <Text>{title}</Text>\r\n        </Box>\r\n        <Box display=\"flex\" flexDirection=\"column\" textAlign=\"right\">\r\n          <MoneyText ammount={sum}/>\r\n          <SubText>{formattedCreatedAtDate}</SubText>\r\n        </Box>\r\n      </ListItemBox>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsListItem;\r\n","import React from \"react\";\r\nimport { ListItemStack, LoadMoreButton } from \"../../components/Layout\";\r\nimport { StockListItem } from \"../../components/ListItems\";\r\nimport { ServerProduct, Product } from \"../../services/interfaces\";\r\n\r\ninterface IProductsListProps {\r\n  result: {\r\n    payload: ServerProduct[];\r\n    status: string;\r\n    error: any;\r\n  };\r\n  count: number;\r\n  onItemClick: (data: Product) => void;\r\n  loadMoreData: () => void;\r\n}\r\n\r\nconst ProductsList: React.FC<IProductsListProps> = ({\r\n  result,\r\n  count,\r\n  onItemClick,\r\n  loadMoreData,\r\n}) => {\r\n  return (\r\n    <ListItemStack maxHeight=\"63vh\">\r\n      {result.status === \"loaded\" &&\r\n        result.payload &&\r\n        result.payload.map(\r\n          ({\r\n            name,\r\n            buy_price,\r\n            sell_price,\r\n            created_at,\r\n            updated_at,\r\n            product_history_id,\r\n            product_id,\r\n            category_id,\r\n            stock,\r\n          }: ServerProduct) => (\r\n            <StockListItem\r\n              ammount={stock}\r\n              title={name}\r\n              sellPrice={sell_price}\r\n              buyPrice={buy_price}\r\n              //sisi, voy a cambiar esto\r\n              updatedAt={created_at}\r\n              onClick={() =>\r\n                onItemClick({\r\n                  name,\r\n                  buy_price,\r\n                  sell_price,\r\n                  product_id,\r\n                  category_id,\r\n                  product_history_id,\r\n                  stock,\r\n                })\r\n              }\r\n            />\r\n          )\r\n        )}\r\n      {/* BOTON DE CARGAR MAS */}\r\n      {result.payload && result.payload.length < count && (\r\n        <LoadMoreButton action={loadMoreData} />\r\n      )}\r\n    </ListItemStack>\r\n  );\r\n};\r\n\r\nexport default ProductsList;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { Product } from \"../../services/interfaces\";\r\n\r\ninterface IProductsItemMenuProps {\r\n  //estado de este drawer\r\n  listItemDrawerState: UseDisclosureReturn;\r\n  //estado del drawer del formulario de modificar gastos\r\n  productDrawerState: UseDisclosureReturn;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  //datos del producto clickeado\r\n  productData: Product;\r\n  //dispatch para abrir el drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n  //funcion de eliminar gasto por id\r\n  deleteFunction: (product_id:number)=>void;\r\n}\r\n\r\nconst ProductsItemMenu: React.FC<IProductsItemMenuProps> = ({\r\n  listItemDrawerState,\r\n  productDrawerState,\r\n  confirmationDrawerState,\r\n  productData,\r\n  setConfirmationMenuData,\r\n  deleteFunction\r\n}) => {\r\n  const {name, product_id} = productData;\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={listItemDrawerState.isOpen}\r\n      onClose={listItemDrawerState.onClose}\r\n      title={`Menu: ${name}`}\r\n      menu={[\r\n        {\r\n          name: \"Modificar\",\r\n          action: () => productDrawerState.onOpen(),\r\n        },\r\n        {\r\n          name: \"Eliminar\",\r\n          action: () => {\r\n            //manda titulo y funcion para ejecutar al drawer de confirmacion, y lo abre\r\n            setConfirmationMenuData({\r\n              title: `eliminar ${name}`,\r\n              action: () => deleteFunction(product_id),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductsItemMenu;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\n\r\ninterface IProductsMainMenuProps {\r\n  actionButtonDrawerState: UseDisclosureReturn;\r\n  onAddProductClick: (title: string) => void;\r\n  onAddProductCategoryClick: UseDisclosureReturn;\r\n  onModifyProductCategoryClick: UseDisclosureReturn;\r\n}\r\n\r\nconst ProductsMainMenu: React.FC<IProductsMainMenuProps> = ({\r\n  actionButtonDrawerState,\r\n  onAddProductClick,\r\n  onAddProductCategoryClick,\r\n  onModifyProductCategoryClick\r\n}) => {\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={actionButtonDrawerState.isOpen}\r\n      onClose={actionButtonDrawerState.onClose}\r\n      title=\"Menu: Stock\"\r\n      menu={[\r\n        {\r\n          name: \"Registrar nueva categoría\",\r\n          action: () => {\r\n            onAddProductCategoryClick.onOpen();\r\n          },\r\n        },\r\n        {\r\n          name: \"Modificar categoría existente\",\r\n          action: () => {\r\n            onModifyProductCategoryClick.onOpen();\r\n          },\r\n        },\r\n        {\r\n          name: \"Registrar nuevo producto\",\r\n          action: () => {\r\n            onAddProductClick(\"Registrar nuevo producto\");\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductsMainMenu;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Category } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\n\r\n//ESTO ES IGUAL A LAS CATEGORIAS DE GASTOS, PUEDO USAR EL MISMO COMPONENTE\r\n\r\ninterface IExpensesDrawerFormProps {\r\n  categories: MenuOption[] | null;\r\n  productCategoryDrawerState: UseDisclosureReturn;\r\n  submitFunction: (data: Category) => void;\r\n}\r\n\r\nconst ExpensesDrawerForm: React.FC<IExpensesDrawerFormProps> = ({\r\n  productCategoryDrawerState,\r\n  submitFunction,\r\n  categories\r\n}) => {\r\n  return (\r\n    <DrawerForm\r\n      title={\"Crear nueva categoría\"}\r\n      isOpen={productCategoryDrawerState.isOpen}\r\n      onClose={productCategoryDrawerState.onClose}\r\n      onFormSubmit={({ name, category_id }) =>\r\n        submitFunction({ name, category_id })\r\n      }\r\n      inputs={[\r\n        {\r\n          name: \"name\",\r\n          title: \"Nombre\",\r\n          defaultValue: \"\",\r\n          validationRules: {\r\n            required: \"Falta completar el nombre\",\r\n            minLength: {\r\n              value: 5,\r\n              message: \"El nombre debe tener mínimo 5 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"El nombre debe tener máximo 30 caracteres\",\r\n            },\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExpensesDrawerForm;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport {\r\n  UseDisclosureReturn,\r\n} from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Category } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\n\r\n//ESTE TAMBIEN ES IGUAL AL DE LOS GASTOS, PUEDO USAR EL MISMO\r\n\r\ninterface IModifyProductsDrawerFormProps {\r\n  categories: MenuOption[] | null;\r\n  modifyProductCategoryDrawerState: UseDisclosureReturn;\r\n  submitFunction: (data: Category) => void;\r\n  deleteProductCategoryById: (id: number) => void;\r\n  selectedCategory: number;\r\n  //dispatch para dar datos al drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  productCategoryDrawerState: UseDisclosureReturn;\r\n}\r\n\r\nconst ModifyProductsDrawerForm: React.FC<IModifyProductsDrawerFormProps> = ({\r\n  modifyProductCategoryDrawerState,\r\n  submitFunction,\r\n  categories,\r\n  deleteProductCategoryById,\r\n  selectedCategory,\r\n  setConfirmationMenuData,\r\n  confirmationDrawerState,\r\n  productCategoryDrawerState\r\n}) => {\r\n  return (\r\n    <>\r\n      {categories && categories.length !== 0 ? (\r\n        <DrawerForm\r\n          title={\"Modificar categoría existente\"}\r\n          isOpen={modifyProductCategoryDrawerState.isOpen}\r\n          onClose={modifyProductCategoryDrawerState.onClose}\r\n          onFormSubmit={({ name, category_id }) => {\r\n            submitFunction({ name, category_id });\r\n          }}\r\n          deleteFunction={(id: number) => {\r\n            setConfirmationMenuData({\r\n              title: `eliminar la categoría seleccionada`,\r\n              subtitle:\r\n                \"• Todos los productos que son de esta categoría serán eliminados en el proceso.\",\r\n              action: () => deleteProductCategoryById(id),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          }}\r\n          deleteFieldName=\"category_id\"\r\n          inputs={[\r\n            {\r\n              name: \"category_id\",\r\n              title: \"Categoría\",\r\n              defaultValue: selectedCategory,\r\n              options: categories,\r\n              validationRules: {\r\n                required: \"Debes elegir una categoría\",\r\n                pattern: {\r\n                  value: /^[0-9]*$/,\r\n                  message: \"La categoría debe ser un numero\",\r\n                },\r\n              },\r\n            },\r\n            {\r\n              name: \"name\",\r\n              title: \"Nombre\",\r\n              defaultValue: \"\",\r\n              validationRules: {\r\n                required: \"Falta completar el nombre\",\r\n                minLength: {\r\n                  value: 5,\r\n                  message: \"El nombre debe tener mínimo 5 caracteres\",\r\n                },\r\n                maxLength: {\r\n                  value: 30,\r\n                  message: \"El nombre debe tener máximo 30 caracteres\",\r\n                },\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n      ) : (\r\n        <DynamicDrawerMenu\r\n          isOpen={modifyProductCategoryDrawerState.isOpen}\r\n          onClose={modifyProductCategoryDrawerState.onClose}\r\n          title=\"Parece que no has creado ninguna categoría\"\r\n          subtitle=\"¿Desea crear una ahora mismo?\"\r\n          menu={[\r\n            {\r\n              name: \"Chi que chi\",\r\n              action: () => productCategoryDrawerState.onOpen(),\r\n            },\r\n            { name: \"Ño\", action: () => modifyProductCategoryDrawerState.onClose() },\r\n          ]}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModifyProductsDrawerForm;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Product, PostProduct } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\ninterface IProductsDrawerFormProps {\r\n  categories: MenuOption[] | null;\r\n  productDrawerState: UseDisclosureReturn;\r\n  productDrawerFormState: {\r\n    title: string;\r\n    mode: string;\r\n  };\r\n  productData: Product;\r\n  submitFunction: (data: PostProduct) => void;\r\n}\r\n\r\nconst ProductsDrawerForm: React.FC<IProductsDrawerFormProps> = ({\r\n  productDrawerState,\r\n  productDrawerFormState,\r\n  productData,\r\n  submitFunction,\r\n  categories,\r\n}) => {\r\n  const { product_id } = productData;\r\n  return (\r\n    <DrawerForm\r\n      title={productDrawerFormState.title}\r\n      isOpen={productDrawerState.isOpen}\r\n      onClose={productDrawerState.onClose}\r\n      onFormSubmit={({ name, buy_price, sell_price, stock, category_id }) => {\r\n        submitFunction({\r\n          name,\r\n          buy_price,\r\n          sell_price,\r\n          stock,\r\n          category_id,\r\n          product_id\r\n        });\r\n      }}\r\n      inputs={[\r\n        {\r\n          name: \"category_id\",\r\n          title: \"Categoría\",\r\n          defaultValue: productData.category_id,\r\n          options: categories,\r\n          validationRules: {\r\n            required:\r\n              \"Parece que no has creado ninguna categoría, hace eso primero\",\r\n            pattern: {\r\n              value: /^[1-9]\\d*$/,\r\n              message:\r\n                \"Parece que no has creado ninguna categoría, hace eso primero\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"name\",\r\n          title: \"Nombre\",\r\n          defaultValue: productData.name,\r\n          validationRules: {\r\n            required: \"Falta completar la descripcion\",\r\n            minLength: {\r\n              value: 5,\r\n              message: \"La descripcion debe tener mínimo 5 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"La descripcion debe tener máximo 30 caracteres\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"buy_price\",\r\n          title: \"Precio de compra\",\r\n          defaultValue: productData.buy_price,\r\n          validationRules: {\r\n            required: \"Falta completar el precio de venta\",\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El dinero debe ser numérico\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"sell_price\",\r\n          title: \"Precio de venta\",\r\n          defaultValue: productData.sell_price,\r\n          validationRules: {\r\n            required: \"Falta completar el precio de compra\",\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El dinero debe ser numérico\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"stock\",\r\n          title: \"Cantidad en stock\",\r\n          defaultValue: productData.stock,\r\n          validationRules: {\r\n            required: \"Falta completar el número en stock\",\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El stock debe ser numérico\",\r\n            },\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductsDrawerForm;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Page, ActionButton } from \"../../components/Layout\";\r\nimport { FaBookOpen } from \"react-icons/fa\";\r\nimport { useDisclosure } from \"@chakra-ui/core\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\nimport { useProductsService } from \"../../services\";\r\nimport {\r\n  ProductsFilterForm,\r\n  ProductsList,\r\n  ProductsItemMenu,\r\n  ProductsMainMenu,\r\n  ProductCategoriesDrawerForm,\r\n  ProductsDrawerForm,\r\n  ModifyProductCategoriesDrawerForm,\r\n} from \"./\";\r\nimport { Product, Category, PostProduct } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\nconst ClickedItemInitialState: Product = {\r\n  product_id: 0,\r\n  category_id: 0,\r\n  name: \"\",\r\n  buy_price: 0,\r\n  sell_price: 0,\r\n  stock:0,\r\n  product_history_id:0\r\n};\r\n\r\ninterface IProductsMenuState {\r\n  title: string;\r\n  mode: \"error\" | \"edit\" | \"create\";\r\n  category_id: number;\r\n}\r\n\r\nexport default function Stock() {\r\n  //guarda datos del gasto que clickeaste para usarlos en un formulario\r\n  const [clickedItem, setClickedItem] = useState<Product>(\r\n    ClickedItemInitialState\r\n  );\r\n\r\n  //menu de clickear gastos\r\n  const listItemDrawerState = useDisclosure();\r\n\r\n  //menu de action button\r\n  const actionButtonDrawerState = useDisclosure();\r\n\r\n  //menu de crear/modifcar gasto\r\n  const productDrawerState = useDisclosure();\r\n\r\n  //menu de crear categoría de gasto\r\n  const productCategoryDrawerState = useDisclosure();\r\n\r\n  //menu de modifcar categoría de gasto\r\n  const modifyProductCategoryDrawerState = useDisclosure();\r\n\r\n  //define si el formulario de gastos va a ser usado para modificar uno existente o agregar uno nuevo\r\n  const [productDrawerFormState, setProductMenuFormState] = useState({\r\n    title: \"error\",\r\n    mode: \"error\",\r\n  });\r\n\r\n  //menu de \"estas seguro?\"\r\n  const { confirmationDrawerState, setConfirmationMenuData } = useContext(\r\n    LayoutContext\r\n  );\r\n\r\n  //almacena los datos del item clickeado y modifica el estado del formulario de gastos\r\n  const onItemClick = (data: Product) => {\r\n    setClickedItem({ ...data });\r\n    setProductMenuFormState({\r\n      title: `Modificar: ${data.name}`,\r\n      mode: \"edit\",\r\n    });\r\n    listItemDrawerState.onOpen();\r\n  };\r\n\r\n  //funcion ejecutada por los botones de agregar\r\n  const onAddProductClick = (title: string) => {\r\n    //meto en el clickeditem los datos del estado inicial\r\n    setClickedItem({ ...ClickedItemInitialState });\r\n    setProductMenuFormState({ title, mode: \"create\" });\r\n    productDrawerState.onOpen();\r\n  };\r\n\r\n  //servicio que toma valores de los filtros, hace una peticion al server y devuelve datos\r\n  const {\r\n    result,\r\n    count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateProduct,\r\n    fetchProductCategories,\r\n    postOrUpdateProductCategory,\r\n    deleteProductCategoryById,\r\n    deleteProductById,\r\n    categories,\r\n    category_id\r\n  } = useProductsService();\r\n\r\n  useEffect(() => {\r\n    fetchProductCategories();\r\n  }, [fetchProductCategories]);\r\n\r\n  const [categoryDropdown, setCategoryDropdown] = useState<MenuOption[] | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (categories) {\r\n      setCategoryDropdown(\r\n        categories.map(({ name, category_id }: Category) => ({\r\n          name,\r\n          value: category_id,\r\n        }))\r\n      );\r\n    }\r\n  }, [categories]);\r\n\r\n  return (\r\n    <Page title=\"Stock\">\r\n      {/* DROPDOWNS Y BARRA DE BUSQUEDA */}\r\n      <ProductsFilterForm\r\n        updateFilters={updateFilters}\r\n        categories={categoryDropdown}\r\n      />\r\n      {/* LISTA DE GASTOS */}\r\n      <ProductsList\r\n        result={result}\r\n        count={count}\r\n        onItemClick={onItemClick}\r\n        loadMoreData={loadMoreData}\r\n      />\r\n      {/* BOTON DE MENU */}\r\n      <ActionButton\r\n        icon={FaBookOpen}\r\n        ariaLabel=\"Menu: Stock\"\r\n        action={() => actionButtonDrawerState.onOpen()}\r\n      />\r\n      {/* MENU DE GASTO ESPECIFICO */}\r\n      <ProductsItemMenu\r\n        listItemDrawerState={listItemDrawerState}\r\n        productDrawerState={productDrawerState}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        productData={clickedItem}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n        deleteFunction={deleteProductById}\r\n      />\r\n      {/* MENU PRINCIPAL */}\r\n      <ProductsMainMenu\r\n        actionButtonDrawerState={actionButtonDrawerState}\r\n        onAddProductClick={(title) => onAddProductClick(title)}\r\n        onAddProductCategoryClick={productCategoryDrawerState}\r\n        onModifyProductCategoryClick={modifyProductCategoryDrawerState}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR GASTOS */}\r\n      <ProductsDrawerForm\r\n        categories={categoryDropdown}\r\n        productDrawerState={productDrawerState}\r\n        productDrawerFormState={productDrawerFormState}\r\n        submitFunction={(data: PostProduct) => postOrUpdateProduct(data)}\r\n        productData={clickedItem}\r\n      />\r\n      {/* FORMULARIO DE CREAR CATEGORIA DE GASTOS */}\r\n      {/* NO OLVIDARME DE HACER ERROR HANDLING PARA NOMBRES REPETIDOS */}\r\n      <ProductCategoriesDrawerForm\r\n        submitFunction={postOrUpdateProductCategory}\r\n        productCategoryDrawerState={productCategoryDrawerState}\r\n        categories={categoryDropdown}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR CATEGORIA DE GASTOS */}\r\n      <ModifyProductCategoriesDrawerForm\r\n        submitFunction={postOrUpdateProductCategory}\r\n        modifyProductCategoryDrawerState={modifyProductCategoryDrawerState}\r\n        categories={categoryDropdown}\r\n        selectedCategory={category_id}\r\n        deleteProductCategoryById={deleteProductCategoryById}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n        productCategoryDrawerState={productCategoryDrawerState}\r\n      />\r\n    </Page>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FilterForm } from \"../../components/Forms\";\r\n\r\ninterface IOrdersFilterFormProps {\r\n  updateFilters: (filters: any) => void;\r\n}\r\n\r\nconst OrdersFilterForm: React.FC<IOrdersFilterFormProps> = ({\r\n  updateFilters,\r\n}) => {\r\n  return (\r\n    <FilterForm\r\n      updateFilters={updateFilters}\r\n      filtersData={{\r\n        searchBar: {\r\n          name: \"search\",\r\n          defaultValue: \"\",\r\n          placeholder: \"Buscar (por nombre de contacto)...\",\r\n        },\r\n        dropdowns: [\r\n          {\r\n            name: \"type\",\r\n            menu: [\r\n              {\r\n                name: \"Compras\",\r\n                value: \"a\",\r\n              },\r\n              { name: \"Ventas\", value: \"b\" },\r\n            ],\r\n            defaultValue: \"b\",\r\n          },\r\n          {\r\n            name: \"completed\",\r\n            menu: [\r\n              { name: \"Pendientes\", value: \"not_completed\" },\r\n              { name: \"Completadas\", value: \"completed\" },    \r\n            ],\r\n            defaultValue: \"not_completed\",\r\n          },\r\n          {\r\n            name: \"delivered\",\r\n            menu: [\r\n              {\r\n                name: \"Entregas finalizadas y pendientes\",\r\n                value: \"all\",\r\n              },\r\n              { name: \"Entregas finalizadas\", value: \"delivered\" },\r\n              { name: \"Entregas pendientes\", value: \"not_delivered\" },\r\n            ],\r\n            defaultValue: \"all\",\r\n          },\r\n          /* {\r\n            name: \"order\",\r\n            menu: [\r\n              {\r\n                name: \"Ordenar por fecha de creación\",\r\n                value: \"created_at\",\r\n              },\r\n              { name: \"Ordenar por descripcion\", value: \"description\" },\r\n              { name: \"Ordenar por suma\", value: \"sum\" },\r\n            ],\r\n            defaultValue: \"created_at\",\r\n          }, */\r\n        ],\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OrdersFilterForm;\r\n","import React from \"react\";\r\nimport { ListItemStack, LoadMoreButton } from \"../../components/Layout\";\r\nimport {\r\n  OrdersListItem,\r\n} from \"../../components/ListItems\";\r\nimport { ServerOrder, Order } from \"../../services/interfaces\";\r\n\r\ninterface IOrdersListProps {\r\n  result: {\r\n    payload: ServerOrder[];\r\n    status: string;\r\n    error: any;\r\n  };\r\n  count: number;\r\n  onItemClick: (data: Order) => void;\r\n  loadMoreData: () => void;\r\n}\r\n\r\nconst OrdersList: React.FC<IOrdersListProps> = ({\r\n  result,\r\n  count,\r\n  onItemClick,\r\n  loadMoreData,\r\n}) => {\r\n  return (\r\n    <ListItemStack maxHeight=\"63vh\">\r\n      {result.status === \"loaded\" &&\r\n        result.payload &&\r\n        result.payload.map((data: ServerOrder) => {\r\n          const {\r\n            contact,\r\n            products_count,\r\n            delivered,\r\n            sum,\r\n            paid,\r\n            updated_at,\r\n            order_id,\r\n            completed,\r\n            type,\r\n            contact_id,\r\n          } = data;\r\n          return (\r\n            <OrdersListItem\r\n              name={contact.name}\r\n              itemAmmount={products_count}\r\n              delivered={delivered}\r\n              sum={sum}\r\n              debt={sum - paid}\r\n              updatedAt={updated_at}\r\n              onClick={() =>\r\n                onItemClick({\r\n                  contact,\r\n                  products_count,\r\n                  delivered,\r\n                  sum,\r\n                  paid,\r\n                  order_id,\r\n                  completed,\r\n                  type,\r\n                  contact_id,\r\n                })\r\n              }\r\n            />\r\n          );\r\n        })}\r\n      {/* BOTON DE CARGAR MAS */}\r\n      {result.payload && result.payload.length < count && (\r\n        <LoadMoreButton action={loadMoreData} />\r\n      )}\r\n    </ListItemStack>\r\n  );\r\n};\r\n\r\nexport default OrdersList;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { Order, PostMarkCompleted } from \"../../services/interfaces\";\r\n\r\ninterface IOrdersItemMenuProps {\r\n  //estado de este drawer\r\n  listItemDrawerState: UseDisclosureReturn;\r\n  //estado del drawer del formulario de modificar items de pedido\r\n  orderProductsDrawerState: UseDisclosureReturn;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  //datos del ordero clickeado\r\n  orderData: Order;\r\n  deliveredProductsDrawerState: UseDisclosureReturn;\r\n  orderTransactionDrawerState: UseDisclosureReturn;\r\n  //dispatch para abrir el drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n  //funcion de eliminar gasto por id\r\n  deleteFunction: (order_id: number) => void;\r\n  markCompleted: (data:PostMarkCompleted) => void;\r\n}\r\n\r\nconst OrdersItemMenu: React.FC<IOrdersItemMenuProps> = ({\r\n  listItemDrawerState,\r\n  orderProductsDrawerState,\r\n  confirmationDrawerState,\r\n  deliveredProductsDrawerState,\r\n  orderData,\r\n  setConfirmationMenuData,\r\n  orderTransactionDrawerState,\r\n  markCompleted,\r\n  deleteFunction,\r\n}) => {\r\n  const {\r\n    contact: { name },\r\n    order_id,\r\n  } = orderData;\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={listItemDrawerState.isOpen}\r\n      onClose={listItemDrawerState.onClose}\r\n      title={`Menu: pedido de ${name}`}\r\n      menu={[\r\n        {\r\n          name: \"Ver productos\",\r\n          action: () => orderProductsDrawerState.onOpen(),\r\n        },\r\n        ...(!orderData.completed ? [{\r\n          name: \"Registrar entrega\",\r\n          action: () => deliveredProductsDrawerState.onOpen(),\r\n        }] : []),\r\n        ...(!orderData.completed ? [{\r\n          name: \"Registrar cobro\",\r\n          action: () => orderTransactionDrawerState.onOpen(),\r\n        }] : []),\r\n        ...(!orderData.completed ? [{\r\n          name: \"Finalizar pedido\",\r\n          action: () => {\r\n            //manda titulo y funcion para ejecutar al drawer de confirmacion, y lo abre\r\n            setConfirmationMenuData({\r\n              title: `finalizar este pedido de ${name}`,\r\n              subtitle: \"No se podran realizarle más modificaciones\",\r\n              action: () => markCompleted({order_id}),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        }] : []),\r\n        {\r\n          name: \"Eliminar\",\r\n          action: () => {\r\n            //manda titulo y funcion para ejecutar al drawer de confirmacion, y lo abre\r\n            setConfirmationMenuData({\r\n              title: `eliminar este pedido de ${name}`,\r\n              action: () => deleteFunction(order_id),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OrdersItemMenu;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\n\r\ninterface IOrdersMainMenuProps {\r\n  actionButtonDrawerState: UseDisclosureReturn;\r\n  onAddOrderClick: (title: string) => void;\r\n}\r\n\r\nconst OrdersMainMenu: React.FC<IOrdersMainMenuProps> = ({\r\n  actionButtonDrawerState,\r\n  onAddOrderClick,\r\n}) => {\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={actionButtonDrawerState.isOpen}\r\n      onClose={actionButtonDrawerState.onClose}\r\n      title=\"Menu: Pedidos\"\r\n      menu={[\r\n        {\r\n          name: \"Registrar nuevo pedido\",\r\n          action: () => {\r\n            onAddOrderClick(\"Registrar nuevo pedido\");\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OrdersMainMenu;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Order } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\ninterface IOrdersDrawerFormProps {\r\n  contacts: MenuOption[];\r\n  orderDrawerState: UseDisclosureReturn;\r\n  orderDrawerFormState: {\r\n    title: string;\r\n    mode: string;\r\n  };\r\n  orderData: Order;\r\n  submitFunction: (data: {order_id:number,contact_id:number,type:\"a\"|\"b\"}) => void;\r\n}\r\n\r\nconst OrdersDrawerForm: React.FC<IOrdersDrawerFormProps> = ({\r\n  orderDrawerState,\r\n  orderDrawerFormState,\r\n  orderData,\r\n  submitFunction,\r\n  contacts,\r\n}) => {\r\n  const { order_id } = orderData;\r\n  return (\r\n    <DrawerForm\r\n      title={orderDrawerFormState.title}\r\n      isOpen={orderDrawerState.isOpen}\r\n      onClose={orderDrawerState.onClose}\r\n      onFormSubmit={({ contact_id, type }) => {\r\n        console.log({order_id, contact_id, type});\r\n        submitFunction({order_id, contact_id, type});\r\n      }}\r\n      inputs={[\r\n        {\r\n          name: \"contact_id\",\r\n          title: \"Contacto\",\r\n          defaultValue: orderData.contact.contact_id ? orderData.contact.contact_id : contacts[0] ? contacts[0].value : 0,\r\n          options: contacts,\r\n          validationRules: {\r\n            required:\r\n              \"Parece que no has creado ningun contacto\",\r\n          },\r\n        },\r\n        {\r\n          name: \"type\",\r\n          title: \"Tipo\",\r\n          defaultValue: orderData.type ? orderData.type : \"b\",\r\n          options: [{name:\"Compra\",value:\"a\"},{name:\"Venta\",value:\"b\"}],\r\n          validationRules: {\r\n            required:\r\n              \"Error en la seleccion de tipo\",\r\n          },\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OrdersDrawerForm;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Order, OrderProduct, PostMarkDelivered } from \"../../services/interfaces\";\r\n\r\ninterface IDeliveredProductsDrawerFormProps {\r\n  deliveredProductsDrawerState: UseDisclosureReturn;\r\n  clickedItem: Order;\r\n  orderProducts: OrderProduct[] | null;\r\n  submitFunction: (data: PostMarkDelivered) => void;\r\n}\r\n\r\nconst DeliveredProductsDrawerForm: React.FC<IDeliveredProductsDrawerFormProps> = ({\r\n  deliveredProductsDrawerState,\r\n  orderProducts,\r\n  submitFunction,\r\n  clickedItem: {order_id,contact:{name}}\r\n}) => {\r\n  return (\r\n    <DrawerForm\r\n      title={`Registrando entrega del pedido de ${name}`}\r\n      subtitle=\"Los valores por defecto entregan el pedido completo.\"\r\n      subsubtitle=\"Los valores negativos simbolizan retornos.\"\r\n      isOpen={deliveredProductsDrawerState.isOpen}\r\n      onClose={deliveredProductsDrawerState.onClose}\r\n      onFormSubmit={(productsForm) =>{\r\n        //mapea el formulario en el formato que necesito para el backend\r\n        const products = Object.entries(productsForm).map((entry)=>({product_id:parseInt(entry[0]),ammount:parseInt(entry[1])}));\r\n        submitFunction({ order_id, products})}\r\n      }\r\n      inputs={\r\n        orderProducts ? \r\n        orderProducts.map((product)=>({\r\n            name: `${product.product_id}`,\r\n            title: product.product_version.name,\r\n            defaultValue: product.ammount-product.delivered,\r\n            validationRules: {\r\n              required: true,\r\n              pattern: {\r\n                value: /^-?[0-9]*$/,\r\n                message: \"la cantidad debe ser numerica\",\r\n              },\r\n              validate: {\r\n                max:(value:string) => parseInt(value)<=product.ammount-product.delivered\r\n              }\r\n            },\r\n            formHelperText:`Pedidos: ${product.ammount} - Entregados: ${product.delivered} - Faltan entregar: ${product.ammount-product.delivered}`,\r\n            maxW:\"20%\"\r\n        })) : [{\r\n        name: \"loading\",\r\n        title: \"loading\",\r\n        defaultValue: 0,\r\n        validationRules: {\r\n          required: false,\r\n          pattern: {\r\n            value: /^-?[0-9]*$/,\r\n            message: \"El dinero debe ser numérico\",\r\n          },\r\n        },\r\n      }]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DeliveredProductsDrawerForm;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Order, PostTransaction } from \"../../services/interfaces\";\r\n\r\ninterface IOrdersDrawerFormProps {\r\n  orderTransactionDrawerState: UseDisclosureReturn;\r\n  orderData: Order;\r\n  submitFunction: (data: PostTransaction) => void;\r\n}\r\n\r\nconst OrdersDrawerForm: React.FC<IOrdersDrawerFormProps> = ({\r\n  orderTransactionDrawerState,\r\n  orderData,\r\n  submitFunction,\r\n}) => {\r\n  const { order_id } = orderData;\r\n  return (\r\n    <DrawerForm\r\n      title={`Registrar cobro de pedido de ${orderData.contact.name}`}\r\n      isOpen={orderTransactionDrawerState.isOpen}\r\n      onClose={orderTransactionDrawerState.onClose}\r\n      onFormSubmit={({ sum }) => {\r\n        submitFunction({order_id, sum});\r\n      }}\r\n      inputs={[\r\n        {\r\n          name: \"sum\",\r\n          title: \"$\",\r\n          defaultValue: orderData.sum - orderData.paid,\r\n          validationRules: {\r\n            required: true,\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El dinero debe ser numérico\",\r\n            },\r\n          },\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default OrdersDrawerForm;\r\n","import React, { ReactText, useEffect, useState, useCallback } from \"react\";\r\nimport { FilterStack } from \"../../components/Layout\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport {\r\n  FormControl,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerCloseButton,\r\n  DrawerHeader,\r\n  DrawerContent,\r\n  DrawerBody,\r\n  Button,\r\n  Flex,\r\n  Box,\r\n  Stack,\r\n  NumberInput,\r\n  SliderTrack,\r\n  Slider,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionHeader,\r\n  AccordionPanel,\r\n  AccordionIcon,\r\n  FormLabel,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListIcon,\r\n  Stat,\r\n  StatLabel,\r\n  StatNumber,\r\n  FormHelperText,\r\n} from \"@chakra-ui/core\";\r\nimport { FilterDropdown } from \"../../components/Layout\";\r\nimport {\r\n  OrderProduct,\r\n  MinifiedProduct,\r\n  Order,\r\n  Category,\r\n  PostOrderProduct,\r\n  DeleteOrderProduct,\r\n} from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\n\r\ninterface IOrderProductsFormProps {\r\n  clickedItem: Order;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  orderProducts: OrderProduct[] | null;\r\n  minifiedProductsList: MinifiedProduct[] | null;\r\n  fetchMinifiedProductsList: () => void;\r\n  fetchProductCategories: () => void;\r\n  categories: Category[] | null;\r\n  onFormSubmit: (data: PostOrderProduct, callback: () => void) => void;\r\n  deleteFunction: (data: DeleteOrderProduct) => void;\r\n  update: () => void;\r\n}\r\n\r\nconst OrderProductsForm: React.FC<IOrderProductsFormProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onFormSubmit,\r\n  deleteFunction,\r\n  orderProducts,\r\n  minifiedProductsList,\r\n  fetchMinifiedProductsList,\r\n  fetchProductCategories,\r\n  categories,\r\n  clickedItem: {\r\n    order_id,\r\n    type,\r\n    contact: { name },\r\n    completed\r\n  },\r\n  update,\r\n}) => {\r\n  const {\r\n    handleSubmit,\r\n    formState,\r\n    errors,\r\n    control,\r\n    watch,\r\n    setValue,\r\n  } = useForm();\r\n\r\n  const [\r\n    filteredMinifiedProductsList,\r\n    setFilteredMinifiedProductsList,\r\n  ] = useState<MinifiedProduct[] | null>(null);\r\n\r\n  const [filteredMenu, setFilteredMenu] = useState<MenuOption[]>();\r\n\r\n  const [maxProducts, setMaxProducts] = useState(0);\r\n\r\n  const selectedCategory = watch(\"category\");\r\n  const selectedProduct = watch(\"product_id\");\r\n\r\n  //obtiene categorias y productos del server\r\n  useEffect(() => {\r\n    fetchMinifiedProductsList();\r\n    fetchProductCategories();\r\n  }, [fetchMinifiedProductsList, fetchProductCategories]);\r\n\r\n  //filtra los menus por categoria y por productos que ya esten en el pedido\r\n  useEffect(() => {\r\n    if (orderProducts && minifiedProductsList) {\r\n      setFilteredMinifiedProductsList(\r\n        minifiedProductsList.filter(\r\n          (product) =>\r\n            !orderProducts.find(\r\n              (orderProduct) => orderProduct.product_id === product.product_id\r\n            )\r\n        )\r\n      );\r\n    }\r\n  }, [orderProducts, minifiedProductsList]);\r\n\r\n  //busca el producto en el array y setea el maximo del slider\r\n  const findAndSetMax = useCallback(\r\n    (product_id: string | string, minifiedProductsList: MinifiedProduct[]) => {\r\n      const selectedProductInArray = minifiedProductsList.find(\r\n        (product) => product.product_id === parseInt(product_id)\r\n      );\r\n      setMaxProducts(\r\n        selectedProductInArray && selectedProductInArray.stock\r\n          ? selectedProductInArray.stock\r\n          : 0\r\n      );\r\n      setValue(\"ammount\", 1);\r\n    },\r\n    [setValue]\r\n  );\r\n\r\n  const onChangeCategory = useCallback(\r\n    (category: string) => {\r\n      if (\r\n        orderProducts &&\r\n        minifiedProductsList &&\r\n        filteredMinifiedProductsList\r\n      ) {\r\n        const productsListFilteredByCategory = parseInt(category)\r\n          ? filteredMinifiedProductsList.filter(\r\n              (product) => product.category_id === parseInt(category)\r\n            )\r\n          : filteredMinifiedProductsList;\r\n        const newMenu = productsListFilteredByCategory.map(\r\n          ({ name, product_id }) => ({\r\n            name,\r\n            value: product_id,\r\n          })\r\n        );\r\n        console.log(newMenu);\r\n        setFilteredMenu(newMenu);\r\n        const newDefaultProduct = newMenu[0] ? newMenu[0].value : 0;\r\n        setValue(\"product_id\", newDefaultProduct);\r\n        findAndSetMax(`${newDefaultProduct}`, minifiedProductsList);\r\n      }\r\n    },\r\n    [\r\n      filteredMinifiedProductsList,\r\n      findAndSetMax,\r\n      minifiedProductsList,\r\n      orderProducts,\r\n      setValue,\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (filteredMinifiedProductsList) {\r\n      onChangeCategory(\"0\");\r\n    }\r\n  }, [categories, filteredMinifiedProductsList, onChangeCategory]);\r\n\r\n  //setea la cantidad maxima que podes definir en un orderproduct por el stock del producto\r\n  useEffect(() => {\r\n    if (minifiedProductsList && selectedProduct) {\r\n      findAndSetMax(selectedProduct, minifiedProductsList);\r\n    }\r\n  }, [minifiedProductsList, findAndSetMax, selectedProduct, selectedCategory]);\r\n\r\n  const onSubmit = handleSubmit(({ product_id, ammount }) => {\r\n    console.log({ product_id, ammount, order_id });\r\n    onFormSubmit({ product_id, ammount, order_id }, () => {\r\n      setValue(\"product_id\", undefined);\r\n      setValue(\"category\", 0);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      isOpen={isOpen}\r\n      onClose={() => {\r\n        onClose();\r\n        update();\r\n      }}\r\n      placement=\"bottom\"\r\n    >\r\n      <DrawerOverlay />\r\n      <DrawerContent overflowY=\"scroll\" maxHeight=\"100vh\">\r\n        <DrawerCloseButton />\r\n        <DrawerHeader>{`Productos del pedido de ${name}`}</DrawerHeader>\r\n        <DrawerBody>\r\n          <Box height=\"30vh\" overflowY=\"scroll\">\r\n            {orderProducts && (\r\n              <Accordion allowToggle allowMultiple>\r\n                {orderProducts.map((product: OrderProduct) => (\r\n                  <AccordionItem>\r\n                    <AccordionHeader>\r\n                      <Box flex=\"1\" textAlign=\"left\">\r\n                        {`x${product.ammount} `}\r\n                        {product.product_version.name}\r\n                      </Box>\r\n                      <AccordionIcon />\r\n                    </AccordionHeader>\r\n                    <AccordionPanel pb={4}>\r\n                      <List spacing={3}>\r\n                        <ListItem>\r\n                          <ListIcon icon=\"attachment\" color=\"green.500\" />\r\n                          Valor por unidad : $\r\n                          {\r\n                            //checkea si es compra o venta\r\n                            type === \"a\"\r\n                              ? product.product_version.buy_price\r\n                              : product.product_version.sell_price\r\n                          }\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListIcon icon=\"attachment\" color=\"green.500\" />\r\n                          Suma : $\r\n                          {\r\n                            //checkea si es compra o venta\r\n                            type === \"a\"\r\n                              ? product.product_version.buy_price *\r\n                                product.ammount\r\n                              : product.product_version.sell_price *\r\n                                product.ammount\r\n                          }\r\n                        </ListItem>\r\n                        {!completed && <ListItem>\r\n                          <ListIcon\r\n                            icon={\r\n                              product.delivered === product.ammount\r\n                                ? \"check-circle\"\r\n                                : \"warning\"\r\n                            }\r\n                            color={\r\n                              product.delivered === product.ammount\r\n                                ? \"green.500\"\r\n                                : \"red.500\"\r\n                            }\r\n                          />\r\n                          Entregados : {product.delivered}\r\n                        </ListItem>}\r\n                      </List>\r\n                      {!completed && <Stack direction=\"row\" justify=\"flex-end\">\r\n                        <IconButton\r\n                          icon={FaTrashAlt}\r\n                          variantColor=\"red\"\r\n                          isLoading={formState.isSubmitting}\r\n                          onClick={() =>\r\n                            deleteFunction({\r\n                              product_id: product.product_id,\r\n                              order_id: order_id,\r\n                            })\r\n                          }\r\n                          float=\"right\"\r\n                          aria-label=\"borrar\"\r\n                        >\r\n                          Borrar\r\n                        </IconButton>\r\n                      </Stack>}\r\n                    </AccordionPanel>\r\n                  </AccordionItem>\r\n                ))}\r\n              </Accordion>\r\n            )}\r\n          </Box>\r\n          {/* ESTA MINIFUNCION EN EL FORMCONTROL BUSCA SI TIENE ERRORES EL OBJETO, HACIENDO TYPECASTING A BOOLEAN TODAS SUS PROPIEDADES */}\r\n          {!completed && <Accordion allowToggle allowMultiple>\r\n            <AccordionItem>\r\n              <AccordionHeader>\r\n                <Box flex=\"1\" textAlign=\"center\">\r\n                  <FormLabel\r\n                    htmlFor=\"addproduct\"\r\n                    textAlign=\"center\"\r\n                    width=\"100%\"\r\n                    fontWeight=\"bold\"\r\n                  >\r\n                    Agregar un producto\r\n                  </FormLabel>\r\n                </Box>\r\n                <AccordionIcon />\r\n              </AccordionHeader>\r\n              <AccordionPanel>\r\n                <FormControl\r\n                  isInvalid={Object.values(errors).find((value) => !!value)}\r\n                >\r\n                  <form onSubmit={onSubmit} name=\"addproduct\">\r\n                    <FilterStack>\r\n                      <Stack justify=\"center\">\r\n                        {categories && (\r\n                          <Box>\r\n                            <FormLabel htmlFor=\"category\">Categoría</FormLabel>\r\n                            <Controller\r\n                              defaultValue={0}\r\n                              control={control}\r\n                              name=\"category\"\r\n                              as={({ onChange, value, name }) => (\r\n                                <FilterDropdown\r\n                                  menu={[\r\n                                    { name: \"Todas las categorías\", value: 0 },\r\n                                    ...categories.map((category: Category) => ({\r\n                                      name: category.name,\r\n                                      value: category.category_id,\r\n                                    })),\r\n                                  ]}\r\n                                  onChange={(e) => {\r\n                                    onChange(e.target.value);\r\n                                    onChangeCategory(e.target.value);\r\n                                  }}\r\n                                  defaultValue={value}\r\n                                  name={name}\r\n                                />\r\n                              )}\r\n                            />\r\n                          </Box>\r\n                        )}\r\n                        {filteredMinifiedProductsList && (\r\n                          <Box>\r\n                            <FormLabel htmlFor=\"product_id\">Producto</FormLabel>\r\n                            <Controller\r\n                              defaultValue={\r\n                                filteredMenu\r\n                                  ? filteredMenu[0]\r\n                                    ? filteredMenu[0].value\r\n                                    : 1\r\n                                  : 1\r\n                              }\r\n                              control={control}\r\n                              name=\"product_id\"\r\n                              as={({ onChange, value, name }) => (\r\n                                <FilterDropdown\r\n                                  menu={filteredMenu ? filteredMenu : []}\r\n                                  onChange={(e) => onChange(e.target.value)}\r\n                                  defaultValue={value}\r\n                                  name={name}\r\n                                />\r\n                              )}\r\n                            />\r\n                            <FormHelperText mb=\"10px\">\r\n                              {`En stock: ${maxProducts}`}\r\n                            </FormHelperText>\r\n                          </Box>\r\n                        )}\r\n                        {filteredMinifiedProductsList && (\r\n                          <Box>\r\n                            <FormLabel htmlFor=\"ammount\">Cantidad</FormLabel>\r\n                            <Controller\r\n                              defaultValue={1}\r\n                              control={control}\r\n                              name=\"ammount\"\r\n                              as={({ onChange, value, name }) => (\r\n                                <Box>\r\n                                  <Flex mr={3} mb={5}>\r\n                                    <NumberInput\r\n                                      maxW=\"100px\"\r\n                                      mr=\"2rem\"\r\n                                      value={value}\r\n                                      onChange={(n: ReactText) => onChange(n)}\r\n                                    />\r\n                                    <Slider\r\n                                      max={\r\n                                        //checkea si es compra o venta\r\n                                        type === \"b\" ? maxProducts : 20\r\n                                      }\r\n                                      min={1}\r\n                                      flex=\"1\"\r\n                                      value={value}\r\n                                      onChange={(n: ReactText) => onChange(n)}\r\n                                    >\r\n                                      <SliderTrack />\r\n                                      <SliderFilledTrack />\r\n                                      <SliderThumb\r\n                                        fontSize=\"sm\"\r\n                                        width=\"32px\"\r\n                                        height=\"20px\"\r\n                                        children={value}\r\n                                      />\r\n                                    </Slider>\r\n                                  </Flex>\r\n                                </Box>\r\n                              )}\r\n                            />\r\n                          </Box>\r\n                        )}\r\n                      </Stack>\r\n                      <Stack\r\n                        justify=\"space-between\"\r\n                        direction=\"row\"\r\n                        align=\"center\"\r\n                      >\r\n                        {orderProducts && (\r\n                          <Stat>\r\n                            <StatLabel>Suma total del pedido</StatLabel>\r\n                            <StatNumber color=\"darkgreen\">\r\n                              $\r\n                              {orderProducts.reduce(\r\n                                (acc, product) =>\r\n                                  //checkea si es compra o venta\r\n                                  type === \"a\"\r\n                                    ? acc +\r\n                                      product.ammount *\r\n                                        product.product_version.buy_price\r\n                                    : acc +\r\n                                      product.ammount *\r\n                                        product.product_version.sell_price,\r\n                                0\r\n                              )}\r\n                            </StatNumber>\r\n                          </Stat>\r\n                        )}\r\n                        <Box>\r\n                          <Button\r\n                            variantColor=\"teal\"\r\n                            isLoading={formState.isSubmitting}\r\n                            type=\"submit\"\r\n                          >\r\n                            Agregar\r\n                          </Button>\r\n                        </Box>\r\n                      </Stack>\r\n                    </FilterStack>\r\n                  </form>\r\n                </FormControl>\r\n              </AccordionPanel>\r\n            </AccordionItem>\r\n          </Accordion>}\r\n        </DrawerBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default OrderProductsForm;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Page, ActionButton } from \"../../components/Layout\";\r\nimport { FaListUl } from \"react-icons/fa\";\r\nimport { useDisclosure } from \"@chakra-ui/core\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\nimport {\r\n  useOrdersService,\r\n  useContactsService,\r\n  useProductsService,\r\n} from \"../../services\";\r\nimport { postOrUpdateOrder, PostTransaction } from \"../../services/interfaces\";\r\nimport {\r\n  OrdersFilterForm,\r\n  OrdersList,\r\n  OrdersItemMenu,\r\n  OrdersMainMenu,\r\n  OrdersDrawerForm,\r\n  DeliveredProductsDrawerForm,\r\n  OrderTransactionDrawerForm,\r\n} from \"./\";\r\nimport { Order } from \"../../services/interfaces\";\r\nimport OrderProductsForm from \"./OrderProductsForm\";\r\n\r\nconst ClickedItemInitialState: Order = {\r\n  order_id: 0,\r\n  completed: false,\r\n  type: \"\",\r\n  contact_id: 0,\r\n  products_count: 0,\r\n  paid: 0,\r\n  sum: 0,\r\n  delivered: false,\r\n  contact: {\r\n    name: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    contact_id: 0,\r\n  },\r\n};\r\n\r\nexport default function Pedidos() {\r\n  //guarda datos del gasto que clickeaste para usarlos en un formulario\r\n  const [clickedItem, setClickedItem] = useState<Order>(\r\n    ClickedItemInitialState\r\n  );\r\n\r\n  //menu de clickear pedido\r\n  const listItemDrawerState = useDisclosure();\r\n\r\n  //menu de action button\r\n  const actionButtonDrawerState = useDisclosure();\r\n\r\n  //menu de crear/modifcar pedido\r\n  const orderDrawerState = useDisclosure();\r\n\r\n  //menu de crear/modifcar pedido\r\n  const deliveredProductsDrawerState = useDisclosure();\r\n\r\n  //menu de modificar productos\r\n  const orderProductsDrawerState = useDisclosure();\r\n\r\n  //menu de crear transaccion\r\n  const orderTransactionDrawerState = useDisclosure();\r\n\r\n  //define si el formulario de pedido va a ser usado para modificar uno existente o agregar uno nuevo\r\n  const [orderDrawerFormState, setOrderMenuFormState] = useState({\r\n    title: \"error\",\r\n    mode: \"error\",\r\n  });\r\n\r\n  //menu de \"estas seguro?\"\r\n  const { confirmationDrawerState, setConfirmationMenuData } = useContext(\r\n    LayoutContext\r\n  );\r\n\r\n  //almacena los datos del item clickeado y modifica el estado del formulario de pedido\r\n  const onItemClick = (data: Order) => {\r\n    setClickedItem(data);\r\n    setOrderMenuFormState({\r\n      title: `Modificar pedido de ${data.contact.name}`,\r\n      mode: \"edit\",\r\n    });\r\n    if (data.order_id) {\r\n      fetchOrderProductsByOrderId(data.order_id);\r\n    }\r\n    listItemDrawerState.onOpen();\r\n  };\r\n\r\n  //funcion ejecutada por los botones de agregar\r\n  const onAddOrderClick = (title: string) => {\r\n    //meto en el clickeditem los datos del estado inicial\r\n    setClickedItem({ ...ClickedItemInitialState });\r\n    setOrderMenuFormState({ title, mode: \"create\" });\r\n    orderDrawerState.onOpen();\r\n  };\r\n\r\n  //servicio que toma valores de los filtros, hace una peticion al server y devuelve datos\r\n  const {\r\n    result,\r\n    count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateOrder,\r\n    deleteOrderById,\r\n    fetchOrderProductsByOrderId,\r\n    orderProducts,\r\n    postOrderProduct,\r\n    deleteOrderProduct,\r\n    update,\r\n    markDelivered,\r\n    postTransaction,\r\n    markCompleted\r\n  } = useOrdersService();\r\n\r\n  //usar este servicios esta fetcheando datos al pedo, tengo que mover los useEffect del hook a las paginas\r\n  const { contactsMenu, fetchContactsMinified } = useContactsService();\r\n\r\n  useEffect(() => {\r\n    fetchContactsMinified();\r\n  }, [fetchContactsMinified]);\r\n\r\n  //usar este servicios esta fetcheando datos al pedo, tengo que mover los useEffect del hook a las paginas\r\n  const {\r\n    minifiedProductsList,\r\n    fetchMinifiedProductsList,\r\n    fetchProductCategories,\r\n    categories,\r\n  } = useProductsService();\r\n\r\n  return (\r\n    <Page title=\"Pedidos\">\r\n      {/* DROPDOWNS Y BARRA DE BUSQUEDA */}\r\n      <OrdersFilterForm updateFilters={updateFilters} />\r\n      {/* LISTA DE GASTOS */}\r\n      <OrdersList\r\n        result={result}\r\n        count={count}\r\n        onItemClick={onItemClick}\r\n        loadMoreData={loadMoreData}\r\n      />\r\n      {/* BOTON DE MENU */}\r\n      <ActionButton\r\n        icon={FaListUl}\r\n        ariaLabel=\"Menu: Gastos\"\r\n        action={() => actionButtonDrawerState.onOpen()}\r\n      />\r\n      {/* MENU DE GASTO ESPECIFICO */}\r\n      <OrdersItemMenu\r\n        listItemDrawerState={listItemDrawerState}\r\n        orderProductsDrawerState={orderProductsDrawerState}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        deliveredProductsDrawerState={deliveredProductsDrawerState}\r\n        orderTransactionDrawerState={orderTransactionDrawerState}\r\n        orderData={clickedItem}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n        markCompleted={markCompleted}\r\n        deleteFunction={deleteOrderById}\r\n      />\r\n      {/* MENU PRINCIPAL */}\r\n      <OrdersMainMenu\r\n        actionButtonDrawerState={actionButtonDrawerState}\r\n        onAddOrderClick={(title) => onAddOrderClick(title)}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR PEDIDOS */}\r\n      <OrdersDrawerForm\r\n        contacts={contactsMenu}\r\n        orderDrawerState={orderDrawerState}\r\n        orderDrawerFormState={orderDrawerFormState}\r\n        submitFunction={(data: postOrUpdateOrder) => postOrUpdateOrder(data)}\r\n        orderData={clickedItem}\r\n      />\r\n      <OrderProductsForm\r\n        clickedItem={clickedItem}\r\n        isOpen={orderProductsDrawerState.isOpen}\r\n        onClose={orderProductsDrawerState.onClose}\r\n        orderProducts={orderProducts}\r\n        minifiedProductsList={minifiedProductsList}\r\n        fetchMinifiedProductsList={fetchMinifiedProductsList}\r\n        fetchProductCategories={fetchProductCategories}\r\n        onFormSubmit={postOrderProduct}\r\n        deleteFunction={deleteOrderProduct}\r\n        categories={categories}\r\n        update={update}\r\n      />\r\n      <DeliveredProductsDrawerForm\r\n        deliveredProductsDrawerState={deliveredProductsDrawerState}\r\n        orderProducts={orderProducts}\r\n        clickedItem={clickedItem}\r\n        submitFunction={markDelivered}\r\n      />\r\n      <OrderTransactionDrawerForm\r\n        orderTransactionDrawerState={orderTransactionDrawerState}\r\n        submitFunction={postTransaction}\r\n        orderData={clickedItem}\r\n      />\r\n    </Page>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { FilterForm } from '../../components/Forms';\r\n\r\ninterface IContactsFilterFormProps {\r\n    updateFilters:(filters:any)=>void;\r\n}\r\n\r\nconst ContactsFilterForm : React.FC<IContactsFilterFormProps> = ({updateFilters}) => {\r\n    return (\r\n        <FilterForm\r\n        updateFilters={updateFilters}\r\n\r\n        filtersData={{\r\n          searchBar: {\r\n            name: \"search\",\r\n            defaultValue: \"\",\r\n            placeholder: \"Buscar...\",\r\n          },\r\n          dropdowns: [\r\n            {\r\n              name: \"role\",\r\n              menu: [\r\n                { name: \"Clientes\", value: \"c\" },\r\n                { name: \"Proveedores\", value: \"p\" },\r\n              ],\r\n              defaultValue: \"c\"\r\n            },\r\n            {\r\n              name: \"order\",\r\n              menu: [\r\n                { name: \"Ordenar por nombre\", value: \"name\" },\r\n                { name: \"Ordenar por deuda\", value: \"money\" },\r\n                {\r\n                  name: \"Ordenar por fecha de ult. Actualización\",\r\n                  value: \"updated_at\",\r\n                },\r\n              ],\r\n              defaultValue: \"name\"\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    )\r\n}\r\n\r\nexport default ContactsFilterForm;","import React from \"react\";\r\nimport { ListItemStack, LoadMoreButton } from \"../../components/Layout\";\r\nimport { ContactsListItem } from \"../../components/ListItems\";\r\nimport { ServerContact, Contact } from \"../../services/interfaces\";\r\n\r\ninterface IContactsListProps {\r\n  result: {\r\n    payload:ServerContact[];\r\n    status:string;\r\n    error:any;\r\n  };\r\n  count: number;\r\n  onItemClick: (data: Contact) => void;\r\n  loadMoreData: () => void;\r\n}\r\n\r\nconst ContactsList: React.FC<IContactsListProps> = ({\r\n  result,\r\n  count,\r\n  onItemClick,\r\n  loadMoreData,\r\n}) => {\r\n  return (\r\n    <ListItemStack maxHeight=\"63vh\">\r\n      {result.status===\"loaded\" && result.payload &&\r\n        result.payload.map(\r\n          ({\r\n            name,\r\n            address,\r\n            phone,\r\n            money,\r\n            role,\r\n            updated_at,\r\n            contact_id,\r\n          }: ServerContact) => (\r\n            <ContactsListItem\r\n              name={name}\r\n              address={address}\r\n              phone={phone}\r\n              money={money}\r\n              updatedAt={updated_at}\r\n              onClick={() =>\r\n                onItemClick({ name, address, phone, money, role, contact_id })\r\n              }\r\n            />\r\n          )\r\n        )}\r\n      {/* BOTON DE CARGAR MAS */}\r\n      {result.payload && result.payload.length < count && (\r\n        <LoadMoreButton action={loadMoreData} />\r\n      )}\r\n    </ListItemStack>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { Contact } from \"../../services/interfaces\";\r\n\r\ninterface IContactsItemMenuProps {\r\n  //estado de este drawer\r\n  listItemMenu: UseDisclosureReturn;\r\n  //estado del drawer del formulario de modificar contactos\r\n  contactMenu: UseDisclosureReturn;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  //datos del contacto clickeado\r\n  contactData: Contact;\r\n  //dispatch para abrir el drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n  //funcion de actualizar contactos, la uso para reiniciar el contador de dinero a 0\r\n  postOrUpdateContact: (data: Contact) => void;\r\n  deleteContactById: (id:number) => void;\r\n}\r\n\r\nconst ContactsItemMenu: React.FC<IContactsItemMenuProps> = ({\r\n  listItemMenu,\r\n  contactMenu,\r\n  confirmationDrawerState,\r\n  contactData,\r\n  setConfirmationMenuData,\r\n  postOrUpdateContact,\r\n  deleteContactById\r\n}) => {\r\n  const {name} = contactData;\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={listItemMenu.isOpen}\r\n      onClose={listItemMenu.onClose}\r\n      title={`Menu: ${name}`}\r\n      menu={[\r\n        {\r\n          name:\"Llamar\",\r\n          action: () => {window.open(`tel:+540${contactData.phone}`, '_blank');}\r\n        },\r\n        {\r\n          name: \"Modificar\",\r\n          action: () => contactMenu.onOpen(),\r\n        },\r\n        {\r\n          name: \"Saldar deuda\",\r\n          action: () => alert(`Saldar deuda de ${name}`),\r\n        },\r\n        {\r\n          name: \"Reiniciar el contador de dinero\",\r\n          action: () => {\r\n            setConfirmationMenuData({\r\n              title: `reiniciar el contador de ${name}`,\r\n              action: () => postOrUpdateContact({...contactData, money:0}),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        },\r\n        {\r\n          name: \"Eliminar\",\r\n          action: () => {\r\n            //manda titulo y funcion para ejecutar al drawer de confirmacion, y lo abre\r\n            setConfirmationMenuData({\r\n              title: `eliminar a ${name}`,\r\n              action: () => deleteContactById(contactData.contact_id),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContactsItemMenu;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\n\r\ninterface IContactsMainMenuProps {\r\n  actionButtonMenu:UseDisclosureReturn;\r\n  onAddContactClick:(role:\"c\"|\"p\",title:string)=>void;\r\n}\r\n\r\nconst ContactsMainMenu: React.FC<IContactsMainMenuProps> = ({actionButtonMenu,onAddContactClick}) => {\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={actionButtonMenu.isOpen}\r\n      onClose={actionButtonMenu.onClose}\r\n      title=\"Menu: Contactos\"\r\n      menu={[\r\n        {\r\n          name: \"Registrar nuevo cliente\",\r\n          action: () => {\r\n            onAddContactClick(\"c\",\"Registrar nuevo cliente\");\r\n          },\r\n        },\r\n        {\r\n          name: \"Registrar nuevo proveedor\",\r\n          action: () => {\r\n            onAddContactClick(\"p\",\"Registrar nuevo proveedor\");\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContactsMainMenu;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Contact } from \"../../services/interfaces\";\r\n\r\ninterface IContactsDrawerFormProps {\r\n  contactMenu: UseDisclosureReturn;\r\n  contactMenuFormState: {\r\n    title: string;\r\n    mode: string;\r\n  };\r\n  contactData: Contact;\r\n  submitFunction: (data: Contact) => void;\r\n}\r\n\r\nconst ContactsDrawerForm: React.FC<IContactsDrawerFormProps> = ({\r\n  contactMenu,\r\n  contactMenuFormState,\r\n  contactData,\r\n  submitFunction,\r\n}) => {\r\n  const { contact_id, role } = contactData;\r\n  return (\r\n    <DrawerForm\r\n      title={contactMenuFormState.title}\r\n      isOpen={contactMenu.isOpen}\r\n      onClose={contactMenu.onClose}\r\n      onFormSubmit={({ address, money, name, phone }) =>\r\n        submitFunction({ address, money, name, phone, contact_id, role })\r\n      }\r\n      inputs={[\r\n        {\r\n          name: \"name\",\r\n          title: \"Nombre\",\r\n          defaultValue: contactData.name,\r\n          validationRules: {\r\n            required: \"Falta completar el nombre\",\r\n            minLength: {\r\n              value: 5,\r\n              message: \"El nombre debe tener mínimo 5 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"El nombre debe tener máximo 30 caracteres\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"phone\",\r\n          title: \"Teléfono\",\r\n          defaultValue: contactData.phone,\r\n          validationRules: {\r\n            required: \"Falta completar el teléfono\",\r\n            minLength: {\r\n              value: 10,\r\n              message: \"El telefono debe tener mínimo 10 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"El telefono debe tener máximo 30 caracteres\",\r\n            },\r\n            pattern: {\r\n              value: /^(?:(?:00)?549?)?0?(?:11|[2368]\\d)(?:(?=\\d{0,2}15)\\d{2})??\\d{8}$/,\r\n              message: \"El teléfono debe ser válido para Argentina\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"address\",\r\n          title: \"Dirección\",\r\n          defaultValue: contactData.address,\r\n          validationRules: {\r\n            required: \"Falta completar la dirección\",\r\n            minLength: {\r\n              value: 5,\r\n              message: \"La dirección debe tener mínimo 5 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"La dirección debe tener máximo 30 caracteres\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"money\",\r\n          title: \"Dinero\",\r\n          defaultValue: contactData.money,\r\n          validationRules: {\r\n            required: false,\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El dinero debe ser numérico\",\r\n            },\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ContactsDrawerForm;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Page, ActionButton } from \"../../components/Layout\";\r\nimport { FaUsers } from \"react-icons/fa\";\r\nimport { useDisclosure } from \"@chakra-ui/core\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\nimport { useContactsService } from \"../../services\";\r\nimport {\r\n  ContactsFilterForm,\r\n  ContactsList,\r\n  ContactsItemMenu,\r\n  ContactsMainMenu,\r\n} from \"./\";\r\nimport ContactsDrawerForm from \"./ContactsDrawerForm\";\r\nimport { Contact } from \"../../services/interfaces\";\r\n\r\nconst ClickedItemInitialState: Contact = {\r\n  contact_id: 0,\r\n  name: \"\",\r\n  phone: \"\",\r\n  money: 0,\r\n  role: \"c\",\r\n  address: \"\",\r\n};\r\n\r\ninterface IContactsMenuState {\r\n  title: string;\r\n  mode: \"error\" | \"edit\" | \"create\";\r\n  role: \"c\" | \"p\";\r\n}\r\n\r\nexport default function Contactos() {\r\n  //guarda datos del contacto que clickeaste para usarlos en un formulario\r\n  const [\r\n    clickedItem,\r\n    setClickedItem,\r\n  ] = useState<Contact>(ClickedItemInitialState);\r\n\r\n  //menu de clickear items\r\n  const listItemMenu = useDisclosure();\r\n\r\n  //menu de action button\r\n  const actionButtonMenu = useDisclosure();\r\n\r\n  //menu de crear/modifcar contacto\r\n  const contactMenu = useDisclosure();\r\n\r\n  //define si el formulario de contactos va a ser usado para modificar uno existente o agregar uno nuevo\r\n  const [contactMenuFormState, setContactMenuFormState] = useState({\r\n    title: \"error\",\r\n    mode: \"error\",\r\n    role: \"c\",\r\n  });\r\n\r\n  //menu de \"estas seguro?\"\r\n  const { confirmationDrawerState, setConfirmationMenuData } = useContext(\r\n    LayoutContext\r\n  );\r\n\r\n  //almacena los datos del item clickeado y modifica el estado del formulario de contactos\r\n  const onItemClick = (data: Contact) => {\r\n    setClickedItem({ ...data });\r\n    setContactMenuFormState({\r\n      title: `Modificar: ${data.name}`,\r\n      mode: \"edit\",\r\n      role: data.role,\r\n    });\r\n    listItemMenu.onOpen();\r\n  };\r\n\r\n  //funcion ejecutada por los botones de agregar cliente/proveedor\r\n  const onAddContactClick = (role: \"c\" | \"p\", title: string) => {\r\n    //meto en el clickeditem los datos del estado inicial menos el rol, que lo saco de los parametros\r\n    //esto es medio quilombo porque no describe bien lo que quiero hacer, en un futuro lo voy a cambiar\r\n    setClickedItem({...ClickedItemInitialState, role});\r\n    setContactMenuFormState({ title, mode: \"create\", role });\r\n    contactMenu.onOpen();\r\n  };\r\n\r\n  //servicio que toma valores de los filtros, hace una peticion al server y devuelve datos\r\n  const {\r\n    result,\r\n    count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateContact,\r\n    deleteContactById\r\n  } = useContactsService();\r\n\r\n  return (\r\n    <Page title=\"Contactos\">\r\n      {/* DROPDOWNS Y BARRA DE BUSQUEDA */}\r\n      <ContactsFilterForm updateFilters={updateFilters} />\r\n      {/* LISTA DE CONTACTOS */}\r\n      <ContactsList\r\n        result={result}\r\n        count={count}\r\n        onItemClick={onItemClick}\r\n        loadMoreData={loadMoreData}\r\n      />\r\n      {/* BOTON DE MENU */}\r\n      <ActionButton\r\n        icon={FaUsers}\r\n        ariaLabel=\"Menu: Contactos\"\r\n        action={() => actionButtonMenu.onOpen()}\r\n      />\r\n      {/* MENU DE CONTACTO ESPECIFICO */}\r\n      <ContactsItemMenu\r\n        listItemMenu={listItemMenu}\r\n        contactMenu={contactMenu}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        contactData={clickedItem}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n        postOrUpdateContact={(data: Contact) => postOrUpdateContact(data)}\r\n        deleteContactById={deleteContactById}\r\n      />\r\n      {/* MENU PRINCIPAL */}\r\n      <ContactsMainMenu\r\n        actionButtonMenu={actionButtonMenu}\r\n        onAddContactClick={(role, title) => onAddContactClick(role, title)}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR CONTACTOS */}\r\n      <ContactsDrawerForm\r\n        contactMenu={contactMenu}\r\n        contactMenuFormState={contactMenuFormState}\r\n        submitFunction={(data: Contact) => postOrUpdateContact(data)}\r\n        contactData={clickedItem}\r\n      />\r\n    </Page>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { FilterForm } from '../../components/Forms';\r\n\r\ninterface ITransactionsFilterFormProps {\r\n    updateFilters:(filters:any)=>void;\r\n}\r\n\r\nconst TransactionsFilterForm : React.FC<ITransactionsFilterFormProps> = ({updateFilters}) => {\r\n    return (\r\n        <FilterForm\r\n        updateFilters={updateFilters}\r\n\r\n        filtersData={{\r\n          searchBar: {\r\n            name: \"search\",\r\n            defaultValue: \"\",\r\n            placeholder: \"Buscar...\",\r\n          },\r\n          dropdowns: [\r\n            {\r\n              name: \"type\",\r\n              menu: [\r\n                { name: \"Cobros\", value: \"b\" },\r\n                { name: \"Pagos\", value: \"a\" },\r\n              ],\r\n              defaultValue: \"b\"\r\n            }\r\n          ],\r\n        }}\r\n      />\r\n    )\r\n}\r\n\r\nexport default TransactionsFilterForm;","import React from \"react\";\r\nimport { ListItemStack, LoadMoreButton } from \"../../components/Layout\";\r\nimport { TransactionsListItem } from \"../../components/ListItems\";\r\nimport { ServerTransaction, Transaction } from \"../../services/interfaces\";\r\n\r\ninterface ITransactionsListProps {\r\n  result: {\r\n    payload: ServerTransaction[];\r\n    status: string;\r\n    error: any;\r\n  };\r\n  count: number;\r\n  onItemClick: (data: Transaction) => void;\r\n  loadMoreData: () => void;\r\n}\r\n\r\nconst TransactionsList: React.FC<ITransactionsListProps> = ({\r\n  result,\r\n  count,\r\n  onItemClick,\r\n  loadMoreData,\r\n}) => {\r\n  return (\r\n    <ListItemStack maxHeight=\"63vh\">\r\n      {result.status === \"loaded\" &&\r\n        result.payload &&\r\n        result.payload.map(\r\n          ({\r\n            transaction_id,\r\n            name,\r\n            sum,\r\n            type,\r\n            order_id,\r\n            contact_id,\r\n            created_at,\r\n          }: ServerTransaction) => (\r\n            <TransactionsListItem\r\n              title={name}\r\n              sum={sum}\r\n              createdAt={created_at}\r\n              onClick={() =>\r\n                onItemClick({\r\n                  transaction_id,\r\n                  name,\r\n                  sum,\r\n                  type,\r\n                  order_id,\r\n                  contact_id,\r\n                })\r\n              }\r\n            />\r\n          )\r\n        )}\r\n      {/* BOTON DE CARGAR MAS */}\r\n      {result.payload && result.payload.length < count && (\r\n        <LoadMoreButton action={loadMoreData} />\r\n      )}\r\n    </ListItemStack>\r\n  );\r\n};\r\n\r\nexport default TransactionsList;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { Transaction } from \"../../services/interfaces\";\r\n\r\ninterface ITransactionsItemMenuProps {\r\n  //estado de este drawer\r\n  listItemMenu: UseDisclosureReturn;\r\n  //estado del drawer del formulario de modificar transactionos\r\n  transactionMenu: UseDisclosureReturn;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  //datos del transactiono clickeado\r\n  transactionData: Transaction;\r\n  //dispatch para abrir el drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n}\r\n\r\nconst TransactionsItemMenu: React.FC<ITransactionsItemMenuProps> = ({\r\n  listItemMenu,\r\n  transactionMenu,\r\n  confirmationDrawerState,\r\n  transactionData,\r\n  setConfirmationMenuData\r\n}) => {\r\n  const {name} = transactionData;\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={listItemMenu.isOpen}\r\n      onClose={listItemMenu.onClose}\r\n      title={`Menu: ${name}`}\r\n      menu={[\r\n        {\r\n          name: \"Modificar\",\r\n          action: () => transactionMenu.onOpen(),\r\n        },\r\n        {\r\n          name: \"Eliminar\",\r\n          action: () => {\r\n            //manda titulo y funcion para ejecutar al drawer de confirmacion, y lo abre\r\n            setConfirmationMenuData({\r\n              title: `eliminar transaccion de ${name}`,\r\n              action: () => alert(`${name} eliminado`),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TransactionsItemMenu;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Transaction, UpdateTransaction } from \"../../services/interfaces\";\r\n\r\ninterface ITransactionsDrawerFormProps {\r\n  transactionMenu: UseDisclosureReturn;\r\n  transactionData: Transaction;\r\n  submitFunction: (data: UpdateTransaction) => void;\r\n}\r\n\r\nconst TransactionsDrawerForm: React.FC<ITransactionsDrawerFormProps> = ({\r\n  transactionMenu,\r\n  transactionData,\r\n  submitFunction,\r\n}) => {\r\n  const { transaction_id, type, name } = transactionData;\r\n  return (\r\n    <DrawerForm\r\n      title={`Modificar ${type === \"a\"? \"pago\" : \"cobro\"} a ${name}`}\r\n      isOpen={transactionMenu.isOpen}\r\n      onClose={transactionMenu.onClose}\r\n      onFormSubmit={({ sum }) =>\r\n        submitFunction({ sum, transaction_id })\r\n      }\r\n      inputs={[\r\n        {\r\n          name: \"sum\",\r\n          title: \"Dinero\",\r\n          defaultValue: transactionData.sum,\r\n          validationRules: {\r\n            required: false,\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El dinero debe ser numérico\",\r\n            },\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TransactionsDrawerForm;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Page } from \"../../components/Layout\";\r\nimport { useDisclosure } from \"@chakra-ui/core\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\nimport { useTransactionsService } from \"../../services\";\r\nimport {\r\n  TransactionsFilterForm,\r\n  TransactionsList,\r\n  TransactionsItemMenu,\r\n} from \"./\";\r\nimport TransactionsDrawerForm from \"./TransactionsDrawerForm\";\r\nimport { Transaction, UpdateTransaction } from \"../../services/interfaces\";\r\n\r\nconst ClickedItemInitialState: Transaction = {\r\n  transaction_id: 0,\r\n  name: \"\",\r\n  sum: 0,\r\n  type: \"b\",\r\n  order_id: 0,\r\n  contact_id: 0,\r\n};\r\n\r\ninterface ITransactionsMenuState {\r\n  title: string;\r\n  mode: \"error\" | \"edit\" | \"create\";\r\n  type: \"c\" | \"p\";\r\n}\r\n\r\nexport default function Transactionos() {\r\n  //guarda datos del transactiono que clickeaste para usarlos en un formulario\r\n  const [\r\n    clickedItem,\r\n    setClickedItem,\r\n  ] = useState<Transaction>(ClickedItemInitialState);\r\n\r\n  //menu de clickear items\r\n  const listItemMenu = useDisclosure();\r\n\r\n  //menu de crear/modifcar transactiono\r\n  const transactionMenu = useDisclosure();\r\n\r\n  //menu de \"estas seguro?\"\r\n  const { confirmationDrawerState, setConfirmationMenuData } = useContext(\r\n    LayoutContext\r\n  );\r\n\r\n  //almacena los datos del item clickeado y modifica el estado del formulario de transactionos\r\n  const onItemClick = (data: Transaction) => {\r\n    setClickedItem({ ...data });\r\n    listItemMenu.onOpen();\r\n  };\r\n\r\n  //servicio que toma valores de los filtros, hace una peticion al server y devuelve datos\r\n  const {\r\n    result,\r\n    count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    UpdateTransactionByID,\r\n  } = useTransactionsService();\r\n\r\n  return (\r\n    <Page title=\"Transacciones\">\r\n      {/* DROPDOWNS Y BARRA DE BUSQUEDA */}\r\n      <TransactionsFilterForm updateFilters={updateFilters} />\r\n      {/* LISTA DE CONTACTOS */}\r\n      <TransactionsList\r\n        result={result}\r\n        count={count}\r\n        onItemClick={onItemClick}\r\n        loadMoreData={loadMoreData}\r\n      />\r\n      {/* MENU DE CONTACTO ESPECIFICO */}\r\n      <TransactionsItemMenu\r\n        listItemMenu={listItemMenu}\r\n        transactionMenu={transactionMenu}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        transactionData={clickedItem}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR CONTACTOS */}\r\n      <TransactionsDrawerForm\r\n        transactionMenu={transactionMenu}\r\n        submitFunction={(data: UpdateTransaction) => UpdateTransactionByID(data)}\r\n        transactionData={clickedItem}\r\n      />\r\n    </Page>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FilterForm } from \"../../components/Forms\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\ninterface IExpensesFilterFormProps {\r\n  updateFilters: (filters: any) => void;\r\n  categories: MenuOption[] | null;\r\n}\r\n\r\nconst ExpensesFilterForm: React.FC<IExpensesFilterFormProps> = ({\r\n  updateFilters,\r\n  categories,\r\n}) => {\r\n  return (\r\n    <FilterForm\r\n      updateFilters={updateFilters}\r\n      filtersData={{\r\n        searchBar: {\r\n          name: \"search\",\r\n          defaultValue: \"\",\r\n          placeholder: \"Buscar...\",\r\n        },\r\n        dropdowns: [\r\n          {\r\n            name: \"category_id\",\r\n            // el valor 0 el server identifica como \"todas las categorías\"\r\n            menu: categories\r\n              ? [{ name: \"Todas las categorías\", value: \"0\" }, ...categories]\r\n              : [{ name: \"...\", value: \"0\" }],\r\n            defaultValue: 0,\r\n          },\r\n          {\r\n            name: \"order\",\r\n            menu: [\r\n              {\r\n                name: \"Ordenar por fecha de creación\",\r\n                value: \"created_at\",\r\n              },\r\n              { name: \"Ordenar por descripcion\", value: \"description\" },\r\n              { name: \"Ordenar por suma\", value: \"sum\" },\r\n            ],\r\n            defaultValue: \"created_at\",\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExpensesFilterForm;\r\n","import React from \"react\";\r\nimport { ListItemStack, LoadMoreButton } from \"../../components/Layout\";\r\nimport { TransactionsListItem } from \"../../components/ListItems\";\r\nimport { ServerExpense, Expense } from \"../../services/interfaces\";\r\n\r\ninterface IExpensesListProps {\r\n  result: {\r\n    payload:ServerExpense[];\r\n    status:string;\r\n    error:any;\r\n  };\r\n  count: number;\r\n  onItemClick: (data: Expense) => void;\r\n  loadMoreData: () => void;\r\n}\r\n\r\nconst ExpensesList: React.FC<IExpensesListProps> = ({\r\n  result,\r\n  count,\r\n  onItemClick,\r\n  loadMoreData,\r\n}) => {\r\n  return (\r\n    <ListItemStack maxHeight=\"63vh\">\r\n      {result.status===\"loaded\" && result.payload &&\r\n        result.payload.map(\r\n          ({\r\n            description,\r\n            sum,\r\n            created_at,\r\n            updated_at,\r\n            expense_id,\r\n            category_id\r\n          }: ServerExpense) => (\r\n            <TransactionsListItem\r\n              title={description}\r\n              sum={-sum}\r\n              createdAt={created_at}\r\n              onClick={() =>\r\n                onItemClick({ description, expense_id, category_id, sum })\r\n              }\r\n            />\r\n          )\r\n        )}\r\n      {/* BOTON DE CARGAR MAS */}\r\n      {result.payload && result.payload.length < count && (\r\n        <LoadMoreButton action={loadMoreData} />\r\n      )}\r\n    </ListItemStack>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { Expense } from \"../../services/interfaces\";\r\n\r\ninterface IExpensesItemMenuProps {\r\n  //estado de este drawer\r\n  listItemDrawerState: UseDisclosureReturn;\r\n  //estado del drawer del formulario de modificar gastos\r\n  expenseDrawerState: UseDisclosureReturn;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  //datos del expenseo clickeado\r\n  expenseData: Expense;\r\n  //dispatch para abrir el drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n  //funcion de eliminar gasto por id\r\n  deleteFunction: (expense_id:number)=>void;\r\n}\r\n\r\nconst ExpensesItemMenu: React.FC<IExpensesItemMenuProps> = ({\r\n  listItemDrawerState,\r\n  expenseDrawerState,\r\n  confirmationDrawerState,\r\n  expenseData,\r\n  setConfirmationMenuData,\r\n  deleteFunction\r\n}) => {\r\n  const {description, expense_id} = expenseData;\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={listItemDrawerState.isOpen}\r\n      onClose={listItemDrawerState.onClose}\r\n      title={`Menu: ${description}`}\r\n      menu={[\r\n        {\r\n          name: \"Modificar\",\r\n          action: () => expenseDrawerState.onOpen(),\r\n        },\r\n        {\r\n          name: \"Eliminar\",\r\n          action: () => {\r\n            //manda titulo y funcion para ejecutar al drawer de confirmacion, y lo abre\r\n            setConfirmationMenuData({\r\n              title: `eliminar ${description}`,\r\n              action: () => deleteFunction(expense_id),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExpensesItemMenu;\r\n","import React from \"react\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\n\r\ninterface IExpensesMainMenuProps {\r\n  actionButtonDrawerState: UseDisclosureReturn;\r\n  onAddExpenseClick: (title: string) => void;\r\n  onAddExpenseCategoryClick: UseDisclosureReturn;\r\n  onModifyExpenseCategoryClick: UseDisclosureReturn;\r\n}\r\n\r\nconst ExpensesMainMenu: React.FC<IExpensesMainMenuProps> = ({\r\n  actionButtonDrawerState,\r\n  onAddExpenseClick,\r\n  onAddExpenseCategoryClick,\r\n  onModifyExpenseCategoryClick\r\n}) => {\r\n  return (\r\n    <DynamicDrawerMenu\r\n      isOpen={actionButtonDrawerState.isOpen}\r\n      onClose={actionButtonDrawerState.onClose}\r\n      title=\"Menu: Gastos\"\r\n      menu={[\r\n        {\r\n          name: \"Registrar nueva categoría\",\r\n          action: () => {\r\n            onAddExpenseCategoryClick.onOpen();\r\n          },\r\n        },\r\n        {\r\n          name: \"Modificar categoría existente\",\r\n          action: () => {\r\n            onModifyExpenseCategoryClick.onOpen();\r\n          },\r\n        },\r\n        {\r\n          name: \"Registrar nuevo gasto\",\r\n          action: () => {\r\n            onAddExpenseClick(\"Registrar nuevo gasto\");\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExpensesMainMenu;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Category } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\ninterface IExpensesDrawerFormProps {\r\n  categories: MenuOption[] | null;\r\n  expenseCategoryDrawerState: UseDisclosureReturn;\r\n  submitFunction: (data: Category) => void;\r\n}\r\n\r\nconst ExpensesDrawerForm: React.FC<IExpensesDrawerFormProps> = ({\r\n  expenseCategoryDrawerState,\r\n  submitFunction,\r\n  categories\r\n}) => {\r\n  return (\r\n    <DrawerForm\r\n      title={\"Crear nueva categoría\"}\r\n      isOpen={expenseCategoryDrawerState.isOpen}\r\n      onClose={expenseCategoryDrawerState.onClose}\r\n      onFormSubmit={({ name, category_id }) =>\r\n        submitFunction({ name, category_id })\r\n      }\r\n      inputs={[\r\n        {\r\n          name: \"name\",\r\n          title: \"Nombre\",\r\n          defaultValue: \"\",\r\n          validationRules: {\r\n            required: \"Falta completar el nombre\",\r\n            minLength: {\r\n              value: 5,\r\n              message: \"El nombre debe tener mínimo 5 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"El nombre debe tener máximo 30 caracteres\",\r\n            },\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExpensesDrawerForm;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport {\r\n  UseDisclosureReturn,\r\n} from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Category } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\nimport { IConfirmationMenu } from \"../../context/Layout\";\r\nimport { DynamicDrawerMenu } from \"../../components/Layout\";\r\n\r\ninterface IModifyExpensesDrawerFormProps {\r\n  categories: MenuOption[] | null;\r\n  modifyExpenseCategoryDrawerState: UseDisclosureReturn;\r\n  submitFunction: (data: Category) => void;\r\n  deleteExpenseCategoryById: (id: number) => void;\r\n  selectedCategory: number;\r\n  //dispatch para dar datos al drawer de confirmacion\r\n  setConfirmationMenuData: (confirmationDrawerState: IConfirmationMenu) => void;\r\n  //estado del drawer de \"estas seguro?\"\r\n  confirmationDrawerState: UseDisclosureReturn;\r\n  expenseCategoryDrawerState: UseDisclosureReturn;\r\n}\r\n\r\nconst ModifyExpensesDrawerForm: React.FC<IModifyExpensesDrawerFormProps> = ({\r\n  modifyExpenseCategoryDrawerState,\r\n  submitFunction,\r\n  categories,\r\n  deleteExpenseCategoryById,\r\n  selectedCategory,\r\n  setConfirmationMenuData,\r\n  confirmationDrawerState,\r\n  expenseCategoryDrawerState\r\n}) => {\r\n  return (\r\n    <>\r\n      {categories && categories.length !== 0 ? (\r\n        <DrawerForm\r\n          title={\"Modificar categoría existente\"}\r\n          isOpen={modifyExpenseCategoryDrawerState.isOpen}\r\n          onClose={modifyExpenseCategoryDrawerState.onClose}\r\n          onFormSubmit={({ name, category_id }) => {\r\n            submitFunction({ name, category_id });\r\n          }}\r\n          deleteFunction={(id: number) => {\r\n            setConfirmationMenuData({\r\n              title: `eliminar la categoría seleccionada`,\r\n              subtitle:\r\n                \"• Todos los gastos que son de esta categoría serán eliminados en el proceso.\",\r\n              action: () => deleteExpenseCategoryById(id),\r\n            });\r\n            confirmationDrawerState.onOpen();\r\n          }}\r\n          deleteFieldName=\"category_id\"\r\n          inputs={[\r\n            {\r\n              name: \"category_id\",\r\n              title: \"Categoría\",\r\n              defaultValue: selectedCategory,\r\n              options: categories,\r\n              validationRules: {\r\n                required: \"Debes elegir una categoría\",\r\n                pattern: {\r\n                  value: /^[0-9]*$/,\r\n                  message: \"La categoría debe ser un numero\",\r\n                },\r\n              },\r\n            },\r\n            {\r\n              name: \"name\",\r\n              title: \"Nombre\",\r\n              defaultValue: \"\",\r\n              validationRules: {\r\n                required: \"Falta completar el nombre\",\r\n                minLength: {\r\n                  value: 5,\r\n                  message: \"El nombre debe tener mínimo 5 caracteres\",\r\n                },\r\n                maxLength: {\r\n                  value: 30,\r\n                  message: \"El nombre debe tener máximo 30 caracteres\",\r\n                },\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n      ) : (\r\n        <DynamicDrawerMenu\r\n          isOpen={modifyExpenseCategoryDrawerState.isOpen}\r\n          onClose={modifyExpenseCategoryDrawerState.onClose}\r\n          title=\"Parece que no has creado ninguna categoría\"\r\n          subtitle=\"¿Desea crear una ahora mismo?\"\r\n          menu={[\r\n            {\r\n              name: \"Chi que chi\",\r\n              action: () => expenseCategoryDrawerState.onOpen(),\r\n            },\r\n            { name: \"Ño\", action: () => modifyExpenseCategoryDrawerState.onClose() },\r\n          ]}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModifyExpensesDrawerForm;\r\n","import React from \"react\";\r\nimport { DrawerForm } from \"../../components/Forms\";\r\nimport { UseDisclosureReturn } from \"@chakra-ui/core/dist/useDisclosure\";\r\nimport { Expense } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\ninterface IExpensesDrawerFormProps {\r\n  categories: MenuOption[] | null;\r\n  expenseDrawerState: UseDisclosureReturn;\r\n  expenseDrawerFormState: {\r\n    title: string;\r\n    mode: string;\r\n  };\r\n  expenseData: Expense;\r\n  submitFunction: (data: Expense) => void;\r\n}\r\n\r\nconst ExpensesDrawerForm: React.FC<IExpensesDrawerFormProps> = ({\r\n  expenseDrawerState,\r\n  expenseDrawerFormState,\r\n  expenseData,\r\n  submitFunction,\r\n  categories,\r\n}) => {\r\n  const { expense_id } = expenseData;\r\n  return (\r\n    <DrawerForm\r\n      title={expenseDrawerFormState.title}\r\n      isOpen={expenseDrawerState.isOpen}\r\n      onClose={expenseDrawerState.onClose}\r\n      onFormSubmit={({ description, sum, category_id }) => {\r\n        submitFunction({ description, sum, category_id, expense_id });\r\n      }}\r\n      inputs={[\r\n        {\r\n          name: \"category_id\",\r\n          title: \"Categoría\",\r\n          defaultValue: expenseData.category_id,\r\n          options: categories,\r\n          validationRules: {\r\n            required:\r\n              \"Parece que no has creado ninguna categoría, hace eso primero\",\r\n            pattern: {\r\n              value: /^[1-9]\\d*$/,\r\n              message:\r\n                \"Parece que no has creado ninguna categoría, hace eso primero\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"description\",\r\n          title: \"Descripción\",\r\n          defaultValue: expenseData.description,\r\n          validationRules: {\r\n            required: \"Falta completar la descripcion\",\r\n            minLength: {\r\n              value: 5,\r\n              message: \"La descripcion debe tener mínimo 5 caracteres\",\r\n            },\r\n            maxLength: {\r\n              value: 30,\r\n              message: \"La descripcion debe tener máximo 30 caracteres\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: \"sum\",\r\n          title: \"Suma\",\r\n          defaultValue: expenseData.sum,\r\n          validationRules: {\r\n            required: false,\r\n            pattern: {\r\n              value: /^-?[0-9]*$/,\r\n              message: \"El dinero debe ser numérico\",\r\n            },\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExpensesDrawerForm;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Page, ActionButton } from \"../../components/Layout\";\r\nimport { FaBookOpen } from \"react-icons/fa\";\r\nimport { useDisclosure } from \"@chakra-ui/core\";\r\nimport { LayoutContext } from \"../../context/Layout\";\r\nimport { useExpensesService } from \"../../services\";\r\nimport {\r\n  ExpensesFilterForm,\r\n  ExpensesList,\r\n  ExpensesItemMenu,\r\n  ExpensesMainMenu,\r\n  ExpenseCategoriesDrawerForm,\r\n  ExpensesDrawerForm,\r\n  ModifyExpenseCategoriesDrawerForm,\r\n} from \"./\";\r\nimport { Expense, Category } from \"../../services/interfaces\";\r\nimport { MenuOption } from \"../../components/Layout/FilterDropdown\";\r\n\r\nconst ClickedItemInitialState: Expense = {\r\n  expense_id: 0,\r\n  category_id: 0,\r\n  description: \"\",\r\n  sum: 0,\r\n};\r\n\r\ninterface IExpensesMenuState {\r\n  title: string;\r\n  mode: \"error\" | \"edit\" | \"create\";\r\n  category_id: number;\r\n}\r\n\r\nexport default function Gastos() {\r\n  //guarda datos del gasto que clickeaste para usarlos en un formulario\r\n  const [clickedItem, setClickedItem] = useState<Expense>(\r\n    ClickedItemInitialState\r\n  );\r\n\r\n  //menu de clickear gastos\r\n  const listItemDrawerState = useDisclosure();\r\n\r\n  //menu de action button\r\n  const actionButtonDrawerState = useDisclosure();\r\n\r\n  //menu de crear/modifcar gasto\r\n  const expenseDrawerState = useDisclosure();\r\n\r\n  //menu de crear categoría de gasto\r\n  const expenseCategoryDrawerState = useDisclosure();\r\n\r\n  //menu de modifcar categoría de gasto\r\n  const modifyExpenseCategoryDrawerState = useDisclosure();\r\n\r\n  //define si el formulario de gastos va a ser usado para modificar uno existente o agregar uno nuevo\r\n  const [expenseDrawerFormState, setExpenseMenuFormState] = useState({\r\n    title: \"error\",\r\n    mode: \"error\",\r\n  });\r\n\r\n  //menu de \"estas seguro?\"\r\n  const { confirmationDrawerState, setConfirmationMenuData } = useContext(\r\n    LayoutContext\r\n  );\r\n\r\n  //almacena los datos del item clickeado y modifica el estado del formulario de gastos\r\n  const onItemClick = (data: Expense) => {\r\n    setClickedItem({ ...data });\r\n    setExpenseMenuFormState({\r\n      title: `Modificar: ${data.description}`,\r\n      mode: \"edit\",\r\n    });\r\n    listItemDrawerState.onOpen();\r\n  };\r\n\r\n  //funcion ejecutada por los botones de agregar\r\n  const onAddExpenseClick = (title: string) => {\r\n    //meto en el clickeditem los datos del estado inicial\r\n    setClickedItem({ ...ClickedItemInitialState });\r\n    setExpenseMenuFormState({ title, mode: \"create\" });\r\n    expenseDrawerState.onOpen();\r\n  };\r\n\r\n  //servicio que toma valores de los filtros, hace una peticion al server y devuelve datos\r\n  const {\r\n    result,\r\n    count,\r\n    updateFilters,\r\n    loadMoreData,\r\n    postOrUpdateExpense,\r\n    fetchExpenseCategories,\r\n    postOrUpdateExpenseCategory,\r\n    deleteExpenseCategoryById,\r\n    deleteExpenseById,\r\n    categories,\r\n    category_id\r\n  } = useExpensesService();\r\n\r\n  useEffect(() => {\r\n    fetchExpenseCategories();\r\n  }, [fetchExpenseCategories]);\r\n\r\n  const [categoryDropdown, setCategoryDropdown] = useState<MenuOption[] | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (categories) {\r\n      setCategoryDropdown(\r\n        categories.map(({ name, category_id }: Category) => ({\r\n          name,\r\n          value: category_id,\r\n        }))\r\n      );\r\n    }\r\n  }, [categories]);\r\n\r\n  return (\r\n    <Page title=\"Gastos\">\r\n      {/* DROPDOWNS Y BARRA DE BUSQUEDA */}\r\n      <ExpensesFilterForm\r\n        updateFilters={updateFilters}\r\n        categories={categoryDropdown}\r\n      />\r\n      {/* LISTA DE GASTOS */}\r\n      <ExpensesList\r\n        result={result}\r\n        count={count}\r\n        onItemClick={onItemClick}\r\n        loadMoreData={loadMoreData}\r\n      />\r\n      {/* BOTON DE MENU */}\r\n      <ActionButton\r\n        icon={FaBookOpen}\r\n        ariaLabel=\"Menu: Gastos\"\r\n        action={() => actionButtonDrawerState.onOpen()}\r\n      />\r\n      {/* MENU DE GASTO ESPECIFICO */}\r\n      <ExpensesItemMenu\r\n        listItemDrawerState={listItemDrawerState}\r\n        expenseDrawerState={expenseDrawerState}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        expenseData={clickedItem}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n        deleteFunction={deleteExpenseById}\r\n      />\r\n      {/* MENU PRINCIPAL */}\r\n      <ExpensesMainMenu\r\n        actionButtonDrawerState={actionButtonDrawerState}\r\n        onAddExpenseClick={(title) => onAddExpenseClick(title)}\r\n        onAddExpenseCategoryClick={expenseCategoryDrawerState}\r\n        onModifyExpenseCategoryClick={modifyExpenseCategoryDrawerState}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR GASTOS */}\r\n      <ExpensesDrawerForm\r\n        categories={categoryDropdown}\r\n        expenseDrawerState={expenseDrawerState}\r\n        expenseDrawerFormState={expenseDrawerFormState}\r\n        submitFunction={(data: Expense) => postOrUpdateExpense(data)}\r\n        expenseData={clickedItem}\r\n      />\r\n      {/* FORMULARIO DE CREAR CATEGORIA DE GASTOS */}\r\n      {/* NO OLVIDARME DE HACER ERROR HANDLING PARA NOMBRES REPETIDOS */}\r\n      <ExpenseCategoriesDrawerForm\r\n        submitFunction={postOrUpdateExpenseCategory}\r\n        expenseCategoryDrawerState={expenseCategoryDrawerState}\r\n        categories={categoryDropdown}\r\n      />\r\n      {/* FORMULARIO DE MODIFICAR/ELIMINAR CATEGORIA DE GASTOS */}\r\n      <ModifyExpenseCategoriesDrawerForm\r\n        submitFunction={postOrUpdateExpenseCategory}\r\n        modifyExpenseCategoryDrawerState={modifyExpenseCategoryDrawerState}\r\n        categories={categoryDropdown}\r\n        selectedCategory={category_id}\r\n        deleteExpenseCategoryById={deleteExpenseCategoryById}\r\n        confirmationDrawerState={confirmationDrawerState}\r\n        setConfirmationMenuData={setConfirmationMenuData}\r\n        expenseCategoryDrawerState={expenseCategoryDrawerState}\r\n      />\r\n    </Page>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { Page } from '../components/Layout'\r\n\r\nexport default function Configuracion() {\r\n    return (\r\n        <Page title=\"Configuracion\">\r\n            Configuracion\r\n        </Page>\r\n    )\r\n}\r\n","export { default as Inicio } from \"./Inicio\";\r\nexport { default as Stock } from \"./Stock/Stock\";\r\nexport { default as Pedidos } from \"./Pedidos/Pedidos\";\r\nexport { default as Contactos } from \"./Contactos/Contactos\";\r\nexport { default as Transacciones } from \"./Transacciones/Transacciones\";\r\nexport { default as Gastos } from \"./Gastos/Gastos\";\r\nexport { default as Configuracion } from \"./Configuracion\";\r\nexport const stockData = [\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Galletitas 1kg\",\r\n    ammount: 3,\r\n    price: 300,\r\n    updatedAt: \"2/3/2010\",\r\n    id: 1,\r\n  },\r\n];\r\n\r\nexport const contactsData = [\r\n  {\r\n    name: \"Agustin\",\r\n    money: 3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: -3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: -100,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: 3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: 3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: 3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: 3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Agustin\",\r\n    money: 3124,\r\n    id: 1,\r\n    address: \"Av 10 2822\",\r\n    phone: \"2252 231231\",\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n];\r\n\r\nexport const ordersData = [\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: true,\r\n    sum: 4120,\r\n    debt: 200,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: false,\r\n    sum: 4120,\r\n    debt: 0,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 1,\r\n    delivered: true,\r\n    sum: 200,\r\n    debt: 0,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: true,\r\n    sum: 4120,\r\n    debt: 200,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: true,\r\n    sum: 4120,\r\n    debt: 200,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: true,\r\n    sum: 4120,\r\n    debt: 200,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: true,\r\n    sum: 4120,\r\n    debt: 200,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n  {\r\n    name: \"Roticeria 10\",\r\n    id: 1,\r\n    itemAmmount: 4,\r\n    delivered: true,\r\n    sum: 4120,\r\n    debt: 200,\r\n    updatedAt: \"10/1/2000\",\r\n  },\r\n];\r\n\r\nexport const transactionData = [\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Roticeria 10\",\r\n    sum: 4120,\r\n    updatedAt: new Date('1970-01-01 00:00:01'),\r\n    id: 1,\r\n  },\r\n];\r\n\r\nexport const expensesData = [\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n  {\r\n    title: \"Luz\",\r\n    sum: -4120,\r\n    updatedAt: \"10/1/2000\",\r\n    id: 1,\r\n  },\r\n];\r\n","import React, { useContext } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport { useDisclosure } from \"@chakra-ui/core\";\nimport MainDrawer from \"./components/MainDrawer\";\nimport { ConfirmationMenu } from \"./components/Layout\";\nimport { LayoutContext } from \"./context/Layout\";\nimport {\n  FaHome,\n  FaDropbox,\n  FaListUl,\n  FaUsers,\n  FaDonate,\n  FaCog,\n  FaBookOpen,\n} from \"react-icons/fa\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  Inicio,\n  Stock,\n  Pedidos,\n  Contactos,\n  Transacciones,\n  Gastos,\n  Configuracion,\n} from \"./pages\";\n\n//Raiz de la funcionalidad de la aplicacion, despues del login, seteo del enrutado y el layout global\nconst App: React.FC = () => {\n  //Hook que se encarga del manejo del estado del MainDrawer\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  //estado, titulo y funcion que ejecuta el drawer de confirmacion\n  const {\n    store: {\n      confirmationMenu: { title, action, subtitle },\n    },\n    confirmationDrawerState,\n  } = useContext(LayoutContext);\n  return (\n    <Router>\n      <Navbar onMenuClick={onOpen} />\n      <ConfirmationMenu\n        isOpen={confirmationDrawerState.isOpen}\n        onClose={confirmationDrawerState.onClose}\n        title={title}\n        action={action}\n        subtitle={subtitle}\n      />\n      <MainDrawer\n        isOpen={isOpen}\n        onClose={onClose}\n        links={[\n          { name: \"Inicio\", link: \"/admin\", icon: FaHome },\n          { name: \"Stock\", link: \"/stock\", icon: FaDropbox },\n          { name: \"Pedidos\", link: \"/pedidos\", icon: FaListUl },\n          { name: \"Contactos\", link: \"/contactos\", icon: FaUsers },\n          { name: \"Transacciones\", link: \"/transacciones\", icon: FaDonate },\n          { name: \"Gastos\", link: \"/gastos\", icon: FaBookOpen },/* \n          { name: \"Configuracion\", link: \"/configuracion\", icon: FaCog }, */\n        ]}\n      />\n      <Switch>\n        <Route path=\"/admin\" component={Inicio} />\n        <Route path=\"/stock\" component={Stock} />\n        <Route path=\"/pedidos\" component={Pedidos} />\n        <Route path=\"/contactos\" component={Contactos} />\n        <Route path=\"/transacciones\" component={Transacciones} />\n        <Route path=\"/gastos\" component={Gastos} />\n        <Route path=\"/configuracion\" component={Configuracion} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { theme } from \"@chakra-ui/core\";\r\n\r\nexport default {\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    brand: {\r\n      900: \"#1a365d\",\r\n      800: \"#153e75\",\r\n      700: \"#2a69ac\",\r\n    },\r\n  },\r\n  breakpoints: [\"30em\", \"48em\", \"62em\", \"80em\"],\r\n  fonts: {\r\n    heading: '\"Avenir Next\", sans-serif',\r\n    body: \"system-ui, sans-serif\",\r\n    mono: \"Menlo, monospace\",\r\n  },\r\n  fontSizes: {\r\n    xs: \"0.75rem\",\r\n    sm: \"0.875rem\",\r\n    md: \"1rem\",\r\n    lg: \"1.125rem\",\r\n    xl: \"1.25rem\",\r\n    \"2xl\": \"1.5rem\",\r\n    \"3xl\": \"1.875rem\",\r\n    \"4xl\": \"2.25rem\",\r\n    \"5xl\": \"3rem\",\r\n    \"6xl\": \"4rem\",\r\n  },\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport { UserContext, SAVE_TOKEN } from \"../../context/User\";\r\nimport {\r\n  FormControl,\r\n  Input,\r\n  Button,\r\n  FormLabel,\r\n  Divider,\r\n  Heading,\r\n  Box,\r\n} from \"@chakra-ui/core\";\r\n\r\n//Enlace del server backend, guardado en las variables de entorno.\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\n//Enlace de login\r\nconst loginUri = localapi + \"login\";\r\n\r\n//Formulario de login, se encarga de enviar credenciales al server y recibir token\r\nconst LoginForm: React.FC = () => {\r\n  const { dispatch } = useContext(UserContext);\r\n\r\n  const { register, handleSubmit, errors, formState } = useForm();\r\n\r\n  //Peticion al server, guarda token en UserContext, para ser manejado por LoginWrapper\r\n  const onSubmit = handleSubmit(({ email, password }) => {\r\n    console.log(loginUri);\r\n    axios\r\n      .post(loginUri, {\r\n        email,\r\n        password,\r\n      })\r\n      .then((res: any) =>\r\n        dispatch({ type: SAVE_TOKEN, payload: res.data.token })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  });\r\n  return (\r\n    <div>\r\n      <Box textAlign=\"center\">\r\n        <Heading as=\"h3\">Gestión de stock</Heading>\r\n      </Box>\r\n      <Divider />\r\n      <form onSubmit={onSubmit}>\r\n        <FormControl isInvalid={errors.email && errors.password}>\r\n          <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            ref={register({\r\n              required: true,\r\n            })}\r\n          />\r\n          <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            ref={register({\r\n              required: true,\r\n            })}\r\n          />\r\n          <Button\r\n            mt={4}\r\n            variantColor=\"teal\"\r\n            isLoading={formState.isSubmitting}\r\n            type=\"submit\"\r\n            float=\"right\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport {\r\n  UserContext,\r\n  SAVE_USER,\r\n  SAVE_TOKEN,\r\n  LOADING,\r\n} from \"../../context/User\";\r\nimport axios from \"axios\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport { Spinner } from \"@chakra-ui/core\";\r\nimport { ContainerCentered } from \"../Layout\";\r\n\r\nconst localapi = process.env.REACT_APP_ROOT_API;\r\nconst usersUri = localapi + \"users/\";\r\n\r\n//Wrapper del formulario Login, se encarga de guardar la informacion del usuario en la sesion, y renderizar condicionalmente la app.\r\nconst LoginWrapper: React.FC = ({ children }) => {\r\n  const {\r\n    store: {\r\n      token,\r\n      user: { name },\r\n      isLoading,\r\n    },\r\n    dispatch,\r\n  } = useContext(UserContext);\r\n\r\n  //Revisar almacenamiento local buscando token\r\n  //Si lo encuentra, lo guarda en UserContext\r\n  //Si no lo encuentra, desactiva spinner\r\n  useEffect(() => {\r\n    const localToken = localStorage.getItem(\"token\");\r\n    if (localToken) {\r\n      dispatch({ type: SAVE_TOKEN, payload: localToken });\r\n    } else {\r\n      dispatch({ type: LOADING, payload: false });\r\n    }\r\n  }, [dispatch]);\r\n\r\n  //Si hay cambios en el estado del token, se descodifica y se pide al server info del usuario.\r\n  //Guarda el token en el almacenamiento local, y los datos del usuario en UserContext\r\n  //Desactiva spinner si ya terminó el request o no pudo decodificar el token\r\n  //decodedIdentity.sub es el ID del usuario\r\n  useEffect(() => {\r\n    dispatch({ type: LOADING, payload: true });\r\n    const decodedIdentity = jwt.decode(token);\r\n    if (decodedIdentity) {\r\n      localStorage.setItem(\"token\", token);\r\n      const userDataUri = usersUri + decodedIdentity.sub;\r\n      axios\r\n        .get(userDataUri, { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n        .then((res: any) => dispatch({ type: SAVE_USER, payload: res.data }))\r\n        .catch((err) => console.log(err))\r\n        .finally(() => dispatch({ type: LOADING, payload: false }));\r\n    } else {\r\n      dispatch({ type: LOADING, payload: false });\r\n    }\r\n  }, [token, dispatch]);\r\n\r\n  //Condicional : Esta cargando?\r\n  //S: renderizar spinner,\r\n  //N: usuario logueado?\r\n  //S: renderizar app,\r\n  //N: renderizar formulario de logueo\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <ContainerCentered>\r\n          <Spinner size=\"xl\" />\r\n        </ContainerCentered>\r\n      ) : name ? (\r\n        <>{children}</>\r\n      ) : (\r\n        <ContainerCentered>\r\n          <LoginForm />\r\n        </ContainerCentered>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginWrapper;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport customTheme from \"./theme\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport { UserContextProvider } from \"./context/User\";\nimport LoginWrapper from \"./components/Login\";\nimport { LayoutContextProvider } from \"./context/Layout\";\nimport 'core-js/es/map';\nimport 'core-js/es/set';\n\n\n//Raiz verdadera de la aplicacion. proveedores de los contextos, boilerplate de chakra y wrapper condicional de login\nReactDOM.render(\n  //<React.StrictMode>\n    <UserContextProvider>\n      <ThemeProvider theme={customTheme}>\n        <CSSReset />\n        <LoginWrapper>\n          <LayoutContextProvider>\n            <App />\n          </LayoutContextProvider>\n        </LoginWrapper>\n      </ThemeProvider>\n    </UserContextProvider>\n  //</React.StrictMode>,\n  ,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}